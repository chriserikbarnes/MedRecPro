using MedRecPro.Helpers;
using MedRecPro.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration; // Required for IConfiguration
using System.Security.Cryptography; // Required for CryptographicException

[ApiController]
[Route("api/[controller]")]
public class UsersController : ControllerBase // Example Controller
{
    private readonly StringCipher _stringCipher;
    private readonly IConfiguration _configuration;
    private readonly string _pkSecret; // Store the secret once retrieved

    /**************************************************************/
    // Inject dependencies via constructor
    public UsersController(StringCipher stringCipher, IConfiguration configuration)
    {
        _stringCipher = stringCipher ?? throw new ArgumentNullException(nameof(stringCipher));
        _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));

        // Retrieve and validate the secret needed for encryption/decryption
        _pkSecret = _configuration["Security:DB:PKSecret"] ?? throw new InvalidOperationException("Configuration key 'Security:DB:PKSecret' is missing.");
        if (string.IsNullOrWhiteSpace(_pkSecret))
        {
            throw new InvalidOperationException("Configuration key 'Security:DB:PKSecret' cannot be empty.");
        }
    }

    /**************************************************************/
    // Example: Get user - decrypt ID from request, encrypt ID for response
    [HttpGet("GetUser/{encryptedUserId}")]
    public IActionResult GetUser(string encryptedUserId)
    {
        #region implementation
        long userId;
        try
        {
            // Decrypt the ID received from the client/route
            string decryptedId = _stringCipher.Decrypt(encryptedUserId, _pkSecret);
            if (!long.TryParse(decryptedId, out userId))
            {
                return BadRequest("Invalid User ID format.");
            }
        }
        catch (FormatException ex) // Catch specific format errors from Base64 or Take/Skip
        {
            // Log ex
            return BadRequest("Invalid encrypted User ID structure.");
        }
        catch (CryptographicException ex)
        {
            // Log ex (securely)
            return BadRequest("Invalid User ID."); // Generic error for security
        }
        catch (Exception ex) // Catch other potential errors
        {
            // Log ex
            return StatusCode(StatusCodes.Status500InternalServerError, "Error processing user ID.");
        }


        // --- TODO: Replace with actual data retrieval logic ---
        // Example: Fetch user data from database using the decrypted 'userId'
        // var userEntity = _userService.GetUserById(userId); // Assuming a service layer
        var userEntity = new User(); // Placeholder
        userEntity.SetUserIdInternal(userId); // Set the internal ID
        userEntity.PrimaryEmail = $"user{userId}@example.com";
        userEntity.DisplayName = $"User {userId}";
        // ... populate other fields ...
        // --- End of Placeholder ---


        if (userEntity == null)
        {
            return NotFound();
        }

        // Prepare the response DTO/Model
        // Encrypt the internal ID before sending it back in the EncryptedUserId field
        userEntity.EncryptedUserId = StringCipher.Encrypt(userEntity.UserIdInternal.ToString(), _pkSecret);

        // Return the user model (which includes the encrypted ID)
        return Ok(userEntity);
        #endregion
    }

    /**************************************************************/
    // Example: Create user - receive model, save, return model with encrypted ID
    [HttpPost("CreateUser")]
    public IActionResult CreateUser([FromForm] NewUser newUser) // Assuming User model is used directly for input (often a DTO is better)
    {

        #region implementation
    
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var user = newUser.ToUser(); // Assuming a method to convert DTO to User entity

        // The incoming 'newUser.EncryptedUserId' might be null or empty.
        // The actual ID (_userId) will be generated by the database upon saving.

        // --- TODO: Replace with actual data saving logic ---
        // 1. Map input DTO/Model to database entity if needed.
        // 2. Save the new user to the database (e.g., using DbContext).
        //    The database will assign the primary key (_userId).
        // 3. Retrieve the newly assigned ID.

        // Example Placeholder: Simulate saving and getting an ID
        long assignedId = new Random().Next(1000, 9999); // Simulate DB assigning an ID
        user.SetUserIdInternal(assignedId);
        user.CreatedAt = DateTime.UtcNow;
        // --- End of Placeholder ---


        // Encrypt the newly assigned internal ID for the response
        user.EncryptedUserId = StringCipher.Encrypt(user.UserIdInternal.ToString(), _pkSecret);

        // Return the created user (including the encrypted ID)
        // Typically returns 201 Created with location header and the object
        return CreatedAtAction(nameof(GetUser), new { encryptedUserId = user.EncryptedUserId }, newUser);
        #endregion
    }

}
