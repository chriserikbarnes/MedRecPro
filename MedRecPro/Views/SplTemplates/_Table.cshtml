@using MedRecPro.Models;
@using RazorLight.Razor;
@using MedRecPro.Helpers;
@inherits RazorLight.TemplatePage<MedRecPro.Models.TextTableDto>;
@model TextTableDto;
@if (Model != null)
{
    var hasHeader = Model.HasHeader == true && Model.TextTableRows.Any(r => r.RowGroupType == "Header");
    var hasBody = Model.TextTableRows.Any(r => r.RowGroupType == "Body");
    var hasFooter = Model.HasFooter == true && Model.TextTableRows.Any(r => r.RowGroupType == "Footer");

    @* Opening table tag with conditional attributes *@
    <table @SplTemplateHelpers.Attribute("width", Model.Width) @SplTemplateHelpers.Attribute("ID", Model.SectionTableLink)>
        @if (!string.IsNullOrEmpty(Model.Caption))
        {
            <caption>@Raw(Model.Caption)</caption>
        }
         @if (Model.TextTableColumns != null && Model.TextTableColumns.Any())
        {
            var orderedColumns = Model.TextTableColumns.OrderBy(c => c.SequenceNumber).ToList();
            var processedSequences = new HashSet<int?>();
            
            @foreach (var col in orderedColumns)
            {
                @* Skip if already processed as part of a colgroup *@
                if (processedSequences.Contains(col.SequenceNumber))
                {
                    continue;
                }
                
                @* Check if this column is part of a colgroup *@
                if (col.ColGroupSequenceNumber.HasValue)
                {
                    @* Get all columns in this colgroup *@
                    var groupColumns = orderedColumns
                        .Where(c => c.ColGroupSequenceNumber == col.ColGroupSequenceNumber)
                        .OrderBy(c => c.SequenceNumber)
                        .ToList();
                    
                    @* Only render colgroup if this is the first column in the group *@
                    if (groupColumns.First().SequenceNumber == col.SequenceNumber)
                    {
                        @* Opening colgroup tag with group-level attributes *@
                        <colgroup @SplTemplateHelpers.Attribute("styleCode", col.ColGroupStyleCode) @SplTemplateHelpers.Attribute("align", col.ColGroupAlign) @SplTemplateHelpers.Attribute("valign", col.ColGroupVAlign)>
                            @foreach (var groupCol in groupColumns)
                            {
                                @* Self-closing col element with conditional attributes *@
                                <col @SplTemplateHelpers.Attribute("width", groupCol.Width) @SplTemplateHelpers.Attribute("align", groupCol.Align) @SplTemplateHelpers.Attribute("valign", groupCol.VAlign) @SplTemplateHelpers.Attribute("styleCode", groupCol.StyleCode) />
                                processedSequences.Add(groupCol.SequenceNumber);
                            }
                        </colgroup>
                    }
                }
                else
                {
                    @* Standalone column (not in colgroup) *@
                    <col @SplTemplateHelpers.Attribute("width", col.Width) @SplTemplateHelpers.Attribute("align", col.Align) @SplTemplateHelpers.Attribute("valign", col.VAlign) @SplTemplateHelpers.Attribute("styleCode", col.StyleCode) />
                    processedSequences.Add(col.SequenceNumber);
                }
            }
        }
        @if (hasHeader)
        {
            <thead>
                @foreach (var row in Model.TextTableRows.Where(r => r.RowGroupType == "Header")
                        .OrderBy(r => r.SequenceNumber))
                {
                    await IncludeAsync("_TableRow", row);
                }
            </thead>
        }
        @if (hasFooter)
        {
            <tfoot>
                @foreach (var row in Model.TextTableRows.Where(r => r.RowGroupType == "Footer")
                        .OrderBy(r => r.SequenceNumber))
                {
                    await IncludeAsync("_TableRow", row);
                }
            </tfoot>
        }
        @* HL7 v3 requires tbody to appear after tfoot. Render empty tbody if only footer exists. 
            https://stackoverflow.com/questions/5574057/why-do-internal-table-sections-have-to-go-thead-tfoot-tbody-to-validate
        *@
        @if (hasBody || hasFooter)
        {
            <tbody>
                @foreach (var row in Model.TextTableRows.Where(r => r.RowGroupType == "Body")
                        .OrderBy(r => r.SequenceNumber))
                {
                    await IncludeAsync("_TableRow", row);
                }
            </tbody>
        }
    </table>
}