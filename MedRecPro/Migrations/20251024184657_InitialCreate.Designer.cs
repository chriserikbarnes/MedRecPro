// <auto-generated />
using System;
using MedRecPro.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedRecPro.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251024184657_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedRecPro.Models.ActivityLog", b =>
                {
                    b.Property<long>("ActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ActivityLogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ActivityLogId"));

                    b.Property<string>("ActionName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ActionName");

                    b.Property<DateTime>("ActivityTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("ActivityTimestamp");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ActivityType");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ControllerName");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Description");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ErrorMessage");

                    b.Property<string>("ExceptionType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ExceptionType");

                    b.Property<int?>("ExecutionTimeMs")
                        .HasColumnType("int")
                        .HasColumnName("ExecutionTimeMs");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("HttpMethod");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("IpAddress");

                    b.Property<string>("RequestParameters")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RequestParameters");

                    b.Property<string>("RequestPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("RequestPath");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int")
                        .HasColumnName("ResponseStatusCode");

                    b.Property<string>("Result")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Result");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SessionId");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StackTrace");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("UserAgent");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.HasKey("ActivityLogId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserActivityLog");
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ActiveMoiety", b =>
                {
                    b.Property<int?>("ActiveMoietyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ActiveMoietyID"));

                    b.Property<int?>("IngredientSubstanceID")
                        .HasColumnType("int");

                    b.Property<string>("MoietyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoietyUNII")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActiveMoietyID");

                    b.ToTable("ActiveMoiety", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+AdditionalIdentifier", b =>
                {
                    b.Property<int?>("AdditionalIdentifierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AdditionalIdentifierID"));

                    b.Property<string>("IdentifierRootOID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierTypeCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierTypeDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("AdditionalIdentifierID");

                    b.ToTable("AdditionalIdentifier", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Address", b =>
                {
                    b.Property<int?>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AddressID"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateProvince")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Analyte", b =>
                {
                    b.Property<int?>("AnalyteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AnalyteID"));

                    b.Property<int?>("AnalyteSubstanceID")
                        .HasColumnType("int");

                    b.Property<int?>("SubstanceSpecificationID")
                        .HasColumnType("int");

                    b.HasKey("AnalyteID");

                    b.ToTable("Analyte", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ApplicationType", b =>
                {
                    b.Property<int?>("ApplicationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ApplicationTypeID"));

                    b.Property<string>("AppTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppTypeCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppTypeDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationTypeID");

                    b.ToTable("ApplicationType", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+AttachedDocument", b =>
                {
                    b.Property<int?>("AttachedDocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AttachedDocumentID"));

                    b.Property<int?>("ComplianceActionID")
                        .HasColumnType("int");

                    b.Property<string>("DocumentIdRoot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentEntityID")
                        .HasColumnType("int");

                    b.Property<string>("ParentEntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleReference")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttachedDocumentID");

                    b.ToTable("AttachedDocument", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+BillingUnitIndex", b =>
                {
                    b.Property<int?>("BillingUnitIndexID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("BillingUnitIndexID"));

                    b.Property<string>("BillingUnitCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingUnitCodeSystemOID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageNDCSystemOID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageNDCValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.HasKey("BillingUnitIndexID");

                    b.ToTable("BillingUnitIndex", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+BusinessOperation", b =>
                {
                    b.Property<int?>("BusinessOperationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("BusinessOperationID"));

                    b.Property<int?>("DocumentRelationshipID")
                        .HasColumnType("int");

                    b.Property<string>("OperationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PerformingOrganizationID")
                        .HasColumnType("int");

                    b.HasKey("BusinessOperationID");

                    b.HasIndex("PerformingOrganizationID");

                    b.ToTable("BusinessOperation", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+BusinessOperationProductLink", b =>
                {
                    b.Property<int?>("BusinessOperationProductLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("BusinessOperationProductLinkID"));

                    b.Property<int?>("BusinessOperationID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("BusinessOperationProductLinkID");

                    b.ToTable("BusinessOperationProductLink", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+BusinessOperationQualifier", b =>
                {
                    b.Property<int?>("BusinessOperationQualifierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("BusinessOperationQualifierID"));

                    b.Property<int?>("BusinessOperationID")
                        .HasColumnType("int");

                    b.Property<string>("QualifierCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualifierCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualifierDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessOperationQualifierID");

                    b.ToTable("BusinessOperationQualifier", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+CertificationProductLink", b =>
                {
                    b.Property<int?>("CertificationProductLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CertificationProductLinkID"));

                    b.Property<int?>("DocumentRelationshipID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductIdentifierID")
                        .HasColumnType("int");

                    b.HasKey("CertificationProductLinkID");

                    b.ToTable("CertificationProductLink", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Characteristic", b =>
                {
                    b.Property<int?>("CharacteristicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CharacteristicID"));

                    b.Property<string>("CharacteristicCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharacteristicCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoietyID")
                        .HasColumnType("int");

                    b.Property<string>("OriginalText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackagingLevelID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<bool?>("ValueBL")
                        .HasColumnType("bit");

                    b.Property<string>("ValueCV_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueCV_CodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueCV_DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueED_CDATAContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueED_FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueED_MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ValueINT")
                        .HasColumnType("int");

                    b.Property<string>("ValueIVLPQ_HighUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ValueIVLPQ_HighValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ValueIVLPQ_LowUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ValueIVLPQ_LowValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ValueNullFlavor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValuePQ_Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ValuePQ_Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ValueST")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacteristicID");

                    b.HasIndex("MoietyID");

                    b.ToTable("Characteristic", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Commodity", b =>
                {
                    b.Property<int?>("CommodityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CommodityID"));

                    b.Property<string>("CommodityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommodityCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommodityDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommodityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommodityID");

                    b.ToTable("Commodity", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ComplianceAction", b =>
                {
                    b.Property<int?>("ComplianceActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ComplianceActionID"));

                    b.Property<string>("ActionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentRelationshipID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectiveTimeHigh")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTimeLow")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PackageIdentifierID")
                        .HasColumnType("int");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.HasKey("ComplianceActionID");

                    b.ToTable("ComplianceAction", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ContactParty", b =>
                {
                    b.Property<int?>("ContactPartyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ContactPartyID"));

                    b.Property<int?>("AddressID")
                        .HasColumnType("int");

                    b.Property<int?>("ContactPersonID")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationID")
                        .HasColumnType("int");

                    b.HasKey("ContactPartyID");

                    b.ToTable("ContactParty", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ContactPartyTelecom", b =>
                {
                    b.Property<int?>("ContactPartyTelecomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ContactPartyTelecomID"));

                    b.Property<int?>("ContactPartyID")
                        .HasColumnType("int");

                    b.Property<int?>("TelecomID")
                        .HasColumnType("int");

                    b.HasKey("ContactPartyTelecomID");

                    b.ToTable("ContactPartyTelecom", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ContactPerson", b =>
                {
                    b.Property<int?>("ContactPersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ContactPersonID"));

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactPersonID");

                    b.ToTable("ContactPerson", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ContributingFactor", b =>
                {
                    b.Property<int?>("ContributingFactorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ContributingFactorID"));

                    b.Property<int?>("FactorSubstanceID")
                        .HasColumnType("int");

                    b.Property<int?>("InteractionIssueID")
                        .HasColumnType("int");

                    b.HasKey("ContributingFactorID");

                    b.ToTable("ContributingFactor", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+DisciplinaryAction", b =>
                {
                    b.Property<int?>("DisciplinaryActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("DisciplinaryActionID"));

                    b.Property<string>("ActionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EffectiveTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LicenseID")
                        .HasColumnType("int");

                    b.HasKey("DisciplinaryActionID");

                    b.ToTable("DisciplinaryAction", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Document", b =>
                {
                    b.Property<int?>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("DocumentID"));

                    b.Property<string>("DocumentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentCodeSystemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DocumentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EffectiveTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SetGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmissionFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("DocumentID");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+DocumentAuthor", b =>
                {
                    b.Property<int?>("DocumentAuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("DocumentAuthorID"));

                    b.Property<string>("AuthorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationID")
                        .HasColumnType("int");

                    b.HasKey("DocumentAuthorID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("DocumentAuthor", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+DocumentRelationship", b =>
                {
                    b.Property<int?>("DocumentRelationshipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("DocumentRelationshipID"));

                    b.Property<int?>("ChildOrganizationID")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentOrganizationID")
                        .HasColumnType("int");

                    b.Property<int?>("RelationshipLevel")
                        .HasColumnType("int");

                    b.Property<string>("RelationshipType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentRelationshipID");

                    b.ToTable("DocumentRelationship", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+DocumentRelationshipIdentifier", b =>
                {
                    b.Property<int>("DocumentRelationshipIdentifierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentRelationshipIdentifierID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentRelationshipIdentifierID"));

                    b.Property<int?>("DocumentRelationshipID")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationIdentifierID")
                        .HasColumnType("int");

                    b.HasKey("DocumentRelationshipIdentifierID");

                    b.HasIndex("DocumentRelationshipID")
                        .HasDatabaseName("IX_DocumentRelationshipIdentifier_DocumentRelationshipID");

                    b.HasIndex("OrganizationIdentifierID")
                        .HasDatabaseName("IX_DocumentRelationshipIdentifier_OrganizationIdentifierID");

                    b.HasIndex("DocumentRelationshipID", "OrganizationIdentifierID")
                        .IsUnique()
                        .HasDatabaseName("UX_DocumentRelationshipIdentifier_Unique")
                        .HasFilter("[DocumentRelationshipID] IS NOT NULL AND [OrganizationIdentifierID] IS NOT NULL");

                    b.ToTable("DocumentRelationshipIdentifier", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+DosingSpecification", b =>
                {
                    b.Property<int?>("DosingSpecificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("DosingSpecificationID"));

                    b.Property<string>("DoseQuantityUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DoseQuantityValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("RouteCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteCodeSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteNullFlavor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DosingSpecificationID");

                    b.ToTable("DosingSpecification", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+EquivalentEntity", b =>
                {
                    b.Property<int?>("EquivalentEntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("EquivalentEntityID"));

                    b.Property<string>("DefiningMaterialKindCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefiningMaterialKindSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquivalenceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquivalenceCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("EquivalentEntityID");

                    b.ToTable("EquivalentEntity", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+FacilityProductLink", b =>
                {
                    b.Property<int?>("FacilityProductLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("FacilityProductLinkID"));

                    b.Property<int?>("DocumentRelationshipID")
                        .HasColumnType("int");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductIdentifierID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacilityProductLinkID");

                    b.HasIndex("DocumentRelationshipID");

                    b.ToTable("FacilityProductLink", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+GenericMedicine", b =>
                {
                    b.Property<int?>("GenericMedicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("GenericMedicineID"));

                    b.Property<string>("GenericName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneticName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("GenericMedicineID");

                    b.ToTable("GenericMedicine", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Holder", b =>
                {
                    b.Property<int?>("HolderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("HolderID"));

                    b.Property<int?>("HolderOrganizationID")
                        .HasColumnType("int");

                    b.Property<int?>("MarketingCategoryID")
                        .HasColumnType("int");

                    b.HasKey("HolderID");

                    b.ToTable("Holder", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+IdentifiedSubstance", b =>
                {
                    b.Property<int?>("IdentifiedSubstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("IdentifiedSubstanceID"));

                    b.Property<bool?>("IsDefinition")
                        .HasColumnType("bit");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.Property<string>("SubjectType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubstanceIdentifierSystemOID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubstanceIdentifierValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdentifiedSubstanceID");

                    b.ToTable("IdentifiedSubstance", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Ingredient", b =>
                {
                    b.Property<int?>("IngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("IngredientID"));

                    b.Property<string>("ClassCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DenominatorCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DenominatorDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DenominatorTranslationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DenominatorValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IngredientSubstanceID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<string>("NumeratorCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeratorDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeratorTranslationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeratorValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginatingElement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductConceptID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal?>("QuantityDenominator")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QuantityDenominatorUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("QuantityNumerator")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QuantityNumeratorUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferenceSubstanceID")
                        .HasColumnType("int");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SpecifiedSubstanceID")
                        .HasColumnType("int");

                    b.HasKey("IngredientID");

                    b.ToTable("Ingredient", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+IngredientInstance", b =>
                {
                    b.Property<int?>("IngredientInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("IngredientInstanceID"));

                    b.Property<int?>("FillLotInstanceID")
                        .HasColumnType("int");

                    b.Property<int?>("IngredientSubstanceID")
                        .HasColumnType("int");

                    b.Property<int?>("LotIdentifierID")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerOrganizationID")
                        .HasColumnType("int");

                    b.HasKey("IngredientInstanceID");

                    b.ToTable("IngredientInstance", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+IngredientSourceProduct", b =>
                {
                    b.Property<int?>("IngredientSourceProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("IngredientSourceProductID"));

                    b.Property<int?>("IngredientID")
                        .HasColumnType("int");

                    b.Property<string>("SourceProductNDC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceProductNDCSysten")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientSourceProductID");

                    b.ToTable("IngredientSourceProduct", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+IngredientSubstance", b =>
                {
                    b.Property<int?>("IngredientSubstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("IngredientSubstanceID"));

                    b.Property<string>("OriginatingElement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubstanceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UNII")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientSubstanceID");

                    b.ToTable("IngredientSubstance", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+InteractionConsequence", b =>
                {
                    b.Property<int?>("InteractionConsequenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("InteractionConsequenceID"));

                    b.Property<string>("ConsequenceTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsequenceTypeCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsequenceTypeDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsequenceValueCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsequenceValueCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsequenceValueDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InteractionIssueID")
                        .HasColumnType("int");

                    b.HasKey("InteractionConsequenceID");

                    b.ToTable("InteractionConsequence", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+InteractionIssue", b =>
                {
                    b.Property<int?>("InteractionIssueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("InteractionIssueID"));

                    b.Property<string>("InteractionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteractionCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteractionDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.HasKey("InteractionIssueID");

                    b.ToTable("InteractionIssue", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+LegalAuthenticator", b =>
                {
                    b.Property<int?>("LegalAuthenticatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("LegalAuthenticatorID"));

                    b.Property<string>("AssignedPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentID")
                        .HasColumnType("int");

                    b.Property<string>("NoteText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignatureText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SignerOrganizationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeValue")
                        .HasColumnType("datetime2");

                    b.HasKey("LegalAuthenticatorID");

                    b.ToTable("LegalAuthenticator", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+License", b =>
                {
                    b.Property<int?>("LicenseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("LicenseID"));

                    b.Property<int?>("BusinessOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseRootOID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseTypeCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseTypeDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TerritorialAuthorityID")
                        .HasColumnType("int");

                    b.HasKey("LicenseID");

                    b.ToTable("License", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+LotHierarchy", b =>
                {
                    b.Property<int?>("LotHierarchyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("LotHierarchyID"));

                    b.Property<int?>("ChildInstanceID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentInstanceID")
                        .HasColumnType("int");

                    b.HasKey("LotHierarchyID");

                    b.ToTable("LotHierarchy", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+LotIdentifier", b =>
                {
                    b.Property<int?>("LotIdentifierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("LotIdentifierID"));

                    b.Property<string>("LotNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LotRootOID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LotIdentifierID");

                    b.ToTable("LotIdentifier", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+MarketingCategory", b =>
                {
                    b.Property<int?>("MarketingCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("MarketingCategoryID"));

                    b.Property<string>("ApplicationOrMonographIDOID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationOrMonographIDValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CategoryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductConceptID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("TerritoryCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MarketingCategoryID");

                    b.ToTable("MarketingCategory", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+MarketingStatus", b =>
                {
                    b.Property<int?>("MarketingStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("MarketingStatusID"));

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MarketingActCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketingActCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackagingLevelID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MarketingStatusID");

                    b.ToTable("MarketingStatus", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Moiety", b =>
                {
                    b.Property<int?>("MoietyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("MoietyID"));

                    b.Property<int?>("IdentifiedSubstanceID")
                        .HasColumnType("int");

                    b.Property<string>("MoietyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoietyCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoietyDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuantityDenominatorUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("QuantityDenominatorValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("QuantityNumeratorInclusive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("QuantityNumeratorLowValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QuantityNumeratorUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.HasKey("MoietyID");

                    b.HasIndex("IdentifiedSubstanceID");

                    b.ToTable("Moiety", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+NCTLink", b =>
                {
                    b.Property<int?>("NCTLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("NCTLinkID"));

                    b.Property<string>("NCTNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCTRootOID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.HasKey("NCTLinkID");

                    b.ToTable("NCTLink", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+NamedEntity", b =>
                {
                    b.Property<int?>("NamedEntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("NamedEntityID"));

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntitySuffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityTypeCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityTypeDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationID")
                        .HasColumnType("int");

                    b.HasKey("NamedEntityID");

                    b.ToTable("NamedEntity", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ObservationCriterion", b =>
                {
                    b.Property<int?>("ObservationCriterionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ObservationCriterionID"));

                    b.Property<int?>("ApplicationTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("CommodityID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubstanceSpecificationID")
                        .HasColumnType("int");

                    b.Property<string>("TextNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToleranceHighUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ToleranceHighValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ObservationCriterionID");

                    b.ToTable("ObservationCriterion", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ObservationMedia", b =>
                {
                    b.Property<int?>("ObservationMediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ObservationMediaID"));

                    b.Property<string>("DescriptionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentID")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.Property<string>("XsiType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ObservationMediaID");

                    b.ToTable("ObservationMedia", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Organization", b =>
                {
                    b.Property<int?>("OrganizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("OrganizationID"));

                    b.Property<bool?>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationID");

                    b.ToTable("Organization", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+OrganizationIdentifier", b =>
                {
                    b.Property<int?>("OrganizationIdentifierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("OrganizationIdentifierID"));

                    b.Property<string>("IdentifierSystemOID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationID")
                        .HasColumnType("int");

                    b.HasKey("OrganizationIdentifierID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("OrganizationIdentifier", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+OrganizationTelecom", b =>
                {
                    b.Property<int?>("OrganizationTelecomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("OrganizationTelecomID"));

                    b.Property<int?>("OrganizationID")
                        .HasColumnType("int");

                    b.Property<int?>("TelecomID")
                        .HasColumnType("int");

                    b.HasKey("OrganizationTelecomID");

                    b.ToTable("OrganizationTelecom", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+PackageIdentifier", b =>
                {
                    b.Property<int?>("PackageIdentifierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PackageIdentifierID"));

                    b.Property<string>("IdentifierSystemOID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackagingLevelID")
                        .HasColumnType("int");

                    b.HasKey("PackageIdentifierID");

                    b.ToTable("PackageIdentifier", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+PackagingHierarchy", b =>
                {
                    b.Property<int?>("PackagingHierarchyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PackagingHierarchyID"));

                    b.Property<int?>("InnerPackagingLevelID")
                        .HasColumnType("int");

                    b.Property<int?>("OuterPackagingLevelID")
                        .HasColumnType("int");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.HasKey("PackagingHierarchyID");

                    b.ToTable("PackagingHierarchy", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+PackagingLevel", b =>
                {
                    b.Property<int?>("PackagingLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PackagingLevelID"));

                    b.Property<string>("NumeratorTranslationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeratorTranslationCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeratorTranslationDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageFormCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageFormCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageFormDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductInstanceID")
                        .HasColumnType("int");

                    b.Property<decimal?>("QuantityDenominator")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("QuantityNumerator")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QuantityNumeratorUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PackagingLevelID");

                    b.ToTable("PackagingLevel", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+PartOfAssembly", b =>
                {
                    b.Property<int?>("PartOfAssemblyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PartOfAssemblyID"));

                    b.Property<int?>("AccessoryProductID")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryProductID")
                        .HasColumnType("int");

                    b.HasKey("PartOfAssemblyID");

                    b.ToTable("PartOfAssembly", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+PharmacologicClass", b =>
                {
                    b.Property<int?>("PharmacologicClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PharmacologicClassID"));

                    b.Property<string>("ClassCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentifiedSubstanceID")
                        .HasColumnType("int");

                    b.HasKey("PharmacologicClassID");

                    b.ToTable("PharmacologicClass", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+PharmacologicClassHierarchy", b =>
                {
                    b.Property<int?>("PharmacologicClassHierarchyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PharmClassHierarchyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PharmacologicClassHierarchyID"));

                    b.Property<int?>("ChildPharmacologicClassID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentPharmacologicClassID")
                        .HasColumnType("int");

                    b.HasKey("PharmacologicClassHierarchyID");

                    b.ToTable("PharmacologicClassHierarchy", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+PharmacologicClassLink", b =>
                {
                    b.Property<int?>("PharmacologicClassLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PharmClassLinkID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PharmacologicClassLinkID"));

                    b.Property<int?>("ActiveMoietySubstanceID")
                        .HasColumnType("int");

                    b.Property<int?>("PharmacologicClassID")
                        .HasColumnType("int");

                    b.HasKey("PharmacologicClassLinkID");

                    b.ToTable("PharmacologicClassLink", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+PharmacologicClassName", b =>
                {
                    b.Property<int?>("PharmacologicClassNameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PharmClassNameID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PharmacologicClassNameID"));

                    b.Property<string>("NameUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PharmacologicClassID")
                        .HasColumnType("int");

                    b.HasKey("PharmacologicClassNameID");

                    b.ToTable("PharmacologicClassName", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Policy", b =>
                {
                    b.Property<int?>("PolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PolicyID"));

                    b.Property<string>("PolicyClassCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("PolicyID");

                    b.ToTable("Policy", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Product", b =>
                {
                    b.Property<int?>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ProductID"));

                    b.Property<string>("DescriptionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductSuffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ProductConcept", b =>
                {
                    b.Property<int?>("ProductConceptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ProductConceptID"));

                    b.Property<string>("ConceptCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConceptCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConceptType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.HasKey("ProductConceptID");

                    b.ToTable("ProductConcept", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ProductConceptEquivalence", b =>
                {
                    b.Property<int?>("ProductConceptEquivalenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ProductConceptEquivalenceID"));

                    b.Property<int?>("AbstractProductConceptID")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationProductConceptID")
                        .HasColumnType("int");

                    b.Property<string>("EquivalenceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquivalenceCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductConceptEquivalenceID");

                    b.ToTable("ProductConceptEquivalence", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ProductEvent", b =>
                {
                    b.Property<int?>("ProductEventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ProductEventID"));

                    b.Property<DateTime?>("EffectiveTimeLow")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackagingLevelID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("QuantityUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuantityValue")
                        .HasColumnType("int");

                    b.HasKey("ProductEventID");

                    b.ToTable("ProductEvent", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ProductIdentifier", b =>
                {
                    b.Property<int?>("ProductIdentifierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ProductIdentifierID"));

                    b.Property<string>("IdentifierSystemOID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ProductIdentifierID");

                    b.ToTable("ProductIdentifier", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ProductInstance", b =>
                {
                    b.Property<int?>("ProductInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ProductInstanceID"));

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstanceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LotIdentifierID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ProductInstanceID");

                    b.ToTable("ProductInstance", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ProductPart", b =>
                {
                    b.Property<int?>("ProductPartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ProductPartID"));

                    b.Property<int?>("KitProductID")
                        .HasColumnType("int");

                    b.Property<int?>("PartProductID")
                        .HasColumnType("int");

                    b.Property<decimal?>("PartQuantityNumerator")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PartQuantityNumeratorUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductPartID");

                    b.ToTable("ProductPart", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ProductRouteOfAdministration", b =>
                {
                    b.Property<int?>("ProductRouteOfAdministrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ProductRouteOfAdministrationID"));

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("RouteCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteNullFlavor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductRouteOfAdministrationID");

                    b.ToTable("ProductRouteOfAdministration", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ProductWebLink", b =>
                {
                    b.Property<int?>("ProductWebLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ProductWebLinkID"));

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("WebURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductWebLinkID");

                    b.ToTable("ProductWebLink", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Protocol", b =>
                {
                    b.Property<int?>("ProtocolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ProtocolID"));

                    b.Property<string>("ProtocolCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtocolCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtocolDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.HasKey("ProtocolID");

                    b.ToTable("Protocol", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+REMSApproval", b =>
                {
                    b.Property<int?>("REMSApprovalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("REMSApprovalID"));

                    b.Property<string>("ApprovalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProtocolID")
                        .HasColumnType("int");

                    b.Property<string>("TerritoryCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("REMSApprovalID");

                    b.ToTable("REMSApproval", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+REMSElectronicResource", b =>
                {
                    b.Property<int?>("REMSElectronicResourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("REMSElectronicResourceID"));

                    b.Property<Guid?>("ResourceDocumentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResourceReferenceValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleReference")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("REMSElectronicResourceID");

                    b.ToTable("REMSElectronicResource", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+REMSMaterial", b =>
                {
                    b.Property<int?>("REMSMaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("REMSMaterialID"));

                    b.Property<int?>("AttachedDocumentID")
                        .HasColumnType("int");

                    b.Property<Guid?>("MaterialDocumentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleReference")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("REMSMaterialID");

                    b.ToTable("REMSMaterial", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ReferenceSubstance", b =>
                {
                    b.Property<int?>("ReferenceSubstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ReferenceSubstanceID"));

                    b.Property<int?>("IngredientSubstanceID")
                        .HasColumnType("int");

                    b.Property<string>("RefSubstanceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefSubstanceUNII")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReferenceSubstanceID");

                    b.ToTable("ReferenceSubstance", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+RelatedDocument", b =>
                {
                    b.Property<int?>("RelatedDocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("RelatedDocumentID"));

                    b.Property<string>("ReferencedDocumentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferencedDocumentCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferencedDocumentDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReferencedDocumentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReferencedSetGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ReferencedVersionNumber")
                        .HasColumnType("int");

                    b.Property<string>("RelationshipTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceDocumentID")
                        .HasColumnType("int");

                    b.HasKey("RelatedDocumentID");

                    b.ToTable("RelatedDocument", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+RenderedMedia", b =>
                {
                    b.Property<int?>("RenderedMediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("RenderedMediaID"));

                    b.Property<int?>("DocumentID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsInline")
                        .HasColumnType("bit");

                    b.Property<int?>("ObservationMediaID")
                        .HasColumnType("int");

                    b.Property<int?>("SectionTextContentID")
                        .HasColumnType("int");

                    b.Property<int?>("SequenceInContent")
                        .HasColumnType("int");

                    b.HasKey("RenderedMediaID");

                    b.ToTable("RenderedMedia", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Requirement", b =>
                {
                    b.Property<int?>("RequirementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("RequirementID"));

                    b.Property<bool?>("IsMonitoringObservation")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalTextReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PauseQuantityUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PauseQuantityValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PeriodUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PeriodValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProtocolID")
                        .HasColumnType("int");

                    b.Property<int?>("REMSMaterialID")
                        .HasColumnType("int");

                    b.Property<string>("RequirementCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequirementCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequirementDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequirementSequenceNumber")
                        .HasColumnType("int");

                    b.Property<int?>("StakeholderID")
                        .HasColumnType("int");

                    b.HasKey("RequirementID");

                    b.ToTable("Requirement", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+ResponsiblePersonLink", b =>
                {
                    b.Property<int?>("ResponsiblePersonLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ResponsiblePersonLinkID"));

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ResponsiblePersonOrgID")
                        .HasColumnType("int");

                    b.HasKey("ResponsiblePersonLinkID");

                    b.ToTable("ResponsiblePersonLink", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Section", b =>
                {
                    b.Property<int?>("SectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SectionID"));

                    b.Property<int?>("DocumentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectiveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTimeHigh")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTimeLow")
                        .HasColumnType("datetime2");

                    b.Property<string>("SectionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionCodeSystemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SectionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SectionLinkGUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StructuredBodyID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionID");

                    b.ToTable("Section", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+SectionExcerptHighlight", b =>
                {
                    b.Property<int?>("SectionExcerptHighlightID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SectionExcerptHighlightID"));

                    b.Property<string>("HighlightText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.HasKey("SectionExcerptHighlightID");

                    b.ToTable("SectionExcerptHighlight", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+SectionHierarchy", b =>
                {
                    b.Property<int?>("SectionHierarchyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SectionHierarchyID"));

                    b.Property<int?>("ChildSectionID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentSectionID")
                        .HasColumnType("int");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.HasKey("SectionHierarchyID");

                    b.ToTable("SectionHierarchy", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+SectionTextContent", b =>
                {
                    b.Property<int?>("SectionTextContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SectionTextContentID"));

                    b.Property<string>("ContentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentSectionTextContentID")
                        .HasColumnType("int");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("StyleCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionTextContentID");

                    b.ToTable("SectionTextContent", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+SpecializedKind", b =>
                {
                    b.Property<int?>("SpecializedKindID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SpecializedKindID"));

                    b.Property<string>("KindCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KindCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KindDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("SpecializedKindID");

                    b.ToTable("SpecializedKind", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+SpecifiedSubstance", b =>
                {
                    b.Property<int?>("SpecifiedSubstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SpecifiedSubstanceID"));

                    b.Property<string>("SubstanceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubstanceCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubstanceCodeSystemName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecifiedSubstanceID");

                    b.ToTable("SpecifiedSubstance", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Stakeholder", b =>
                {
                    b.Property<int?>("StakeholderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("StakeholderID"));

                    b.Property<string>("StakeholderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StakeholderCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StakeholderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StakeholderID");

                    b.ToTable("Stakeholder", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+StructuredBody", b =>
                {
                    b.Property<int?>("StructuredBodyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("StructuredBodyID"));

                    b.Property<int?>("DocumentID")
                        .HasColumnType("int");

                    b.HasKey("StructuredBodyID");

                    b.ToTable("StructuredBody", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+SubstanceSpecification", b =>
                {
                    b.Property<int?>("SubstanceSpecificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SubstanceSpecificationID"));

                    b.Property<string>("EnforcementMethodCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnforcementMethodCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnforcementMethodDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentifiedSubstanceID")
                        .HasColumnType("int");

                    b.Property<string>("SpecCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubstanceSpecificationID");

                    b.ToTable("SubstanceSpecification", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Telecom", b =>
                {
                    b.Property<int?>("TelecomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TelecomID"));

                    b.Property<string>("TelecomType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelecomValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TelecomID");

                    b.ToTable("Telecom", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+TerritorialAuthority", b =>
                {
                    b.Property<int?>("TerritorialAuthorityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TerritorialAuthorityID"));

                    b.Property<string>("GoverningAgencyIdExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoverningAgencyIdRoot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoverningAgencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerritoryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerritoryCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TerritorialAuthorityID");

                    b.ToTable("TerritorialAuthority", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+TextList", b =>
                {
                    b.Property<int?>("TextListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TextListID"));

                    b.Property<string>("ListType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionTextContentID")
                        .HasColumnType("int");

                    b.Property<string>("StyleCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TextListID");

                    b.ToTable("TextList", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+TextListItem", b =>
                {
                    b.Property<int?>("TextListItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TextListItemID"));

                    b.Property<string>("ItemCaption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TextListID")
                        .HasColumnType("int");

                    b.HasKey("TextListItemID");

                    b.ToTable("TextListItem", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+TextTable", b =>
                {
                    b.Property<int?>("TextTableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TextTableID"));

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasFooter")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasHeader")
                        .HasColumnType("bit");

                    b.Property<string>("SectionTableLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionTextContentID")
                        .HasColumnType("int");

                    b.Property<string>("Width")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TextTableID");

                    b.ToTable("TextTable", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+TextTableCell", b =>
                {
                    b.Property<int?>("TextTableCellID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TextTableCellID"));

                    b.Property<string>("Align")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ColSpan")
                        .HasColumnType("int");

                    b.Property<int?>("RowSpan")
                        .HasColumnType("int");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("StyleCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TextTableRowID")
                        .HasColumnType("int");

                    b.Property<string>("VAlign")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TextTableCellID");

                    b.ToTable("TextTableCell", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+TextTableColumn", b =>
                {
                    b.Property<int?>("TextTableColumnID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TextTableColumnID"));

                    b.Property<string>("Align")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColGroupAlign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ColGroupSequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("ColGroupStyleCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColGroupVAlign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("StyleCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TextTableID")
                        .HasColumnType("int");

                    b.Property<string>("VAlign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Width")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TextTableColumnID");

                    b.ToTable("TextTableColumn", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+TextTableRow", b =>
                {
                    b.Property<int?>("TextTableRowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TextTableRowID"));

                    b.Property<string>("RowGroupType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("StyleCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TextTableID")
                        .HasColumnType("int");

                    b.HasKey("TextTableRowID");

                    b.ToTable("TextTableRow", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+WarningLetterDate", b =>
                {
                    b.Property<int?>("WarningLetterDateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("WarningLetterDateID"));

                    b.Property<DateTime?>("AlertIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.HasKey("WarningLetterDateID");

                    b.ToTable("WarningLetterDate", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.Label+WarningLetterProductInfo", b =>
                {
                    b.Property<int?>("WarningLetterProductInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("WarningLetterProductInfoID"));

                    b.Property<string>("FormCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormCodeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenericName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCodesText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionID")
                        .HasColumnType("int");

                    b.Property<string>("StrengthText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarningLetterProductInfoID");

                    b.ToTable("WarningLetterProductInfo", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.SplData", b =>
                {
                    b.Property<long>("SplDataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SplDataID"));

                    b.Property<bool?>("Archive")
                        .HasColumnType("bit");

                    b.Property<long?>("AspNetUsersID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SplDataGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SplXML")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SplXMLHash")
                        .HasColumnType("char(64)");

                    b.HasKey("SplDataID");

                    b.ToTable("SplData");
                });

            modelBuilder.Entity("MedRecPro.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CanonicalUsername")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FailedLoginCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("en-US");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("LockoutUntil")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MfaEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MfaSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NotificationSettings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PrimaryEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SuspendedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SuspensionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("UTC");

                    b.Property<DateTime?>("TosAcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TosEmailNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("TosMarketingOptIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("TosVersionAccepted")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UiTheme")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("UserFollowing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserPermissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("User");

                    b.HasKey("Id");

                    b.HasIndex("CanonicalUsername")
                        .IsUnique()
                        .HasDatabaseName("UX_Users_CanonicalUsername_Active")
                        .HasFilter("[DeletedAt] IS NULL AND [CanonicalUsername] IS NOT NULL");

                    b.HasIndex("LastActivityAt")
                        .HasDatabaseName("IX_Users_LastActivityAt");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PrimaryEmail")
                        .IsUnique()
                        .HasDatabaseName("UX_Users_PrimaryEmail_Active")
                        .HasFilter("[DeletedAt] IS NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedRecPro.Models.ActivityLog", b =>
                {
                    b.HasOne("MedRecPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedRecPro.Models.Label+BusinessOperation", b =>
                {
                    b.HasOne("MedRecPro.Models.Label+Organization", "PerformingOrganization")
                        .WithMany()
                        .HasForeignKey("PerformingOrganizationID");

                    b.Navigation("PerformingOrganization");
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Characteristic", b =>
                {
                    b.HasOne("MedRecPro.Models.Label+Moiety", null)
                        .WithMany("Characteristics")
                        .HasForeignKey("MoietyID");
                });

            modelBuilder.Entity("MedRecPro.Models.Label+DocumentAuthor", b =>
                {
                    b.HasOne("MedRecPro.Models.Label+Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("MedRecPro.Models.Label+DocumentRelationshipIdentifier", b =>
                {
                    b.HasOne("MedRecPro.Models.Label+DocumentRelationship", "DocumentRelationship")
                        .WithMany()
                        .HasForeignKey("DocumentRelationshipID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MedRecPro.Models.Label+OrganizationIdentifier", "OrganizationIdentifier")
                        .WithMany()
                        .HasForeignKey("OrganizationIdentifierID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DocumentRelationship");

                    b.Navigation("OrganizationIdentifier");
                });

            modelBuilder.Entity("MedRecPro.Models.Label+FacilityProductLink", b =>
                {
                    b.HasOne("MedRecPro.Models.Label+DocumentRelationship", "DocumentRelationship")
                        .WithMany()
                        .HasForeignKey("DocumentRelationshipID");

                    b.Navigation("DocumentRelationship");
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Moiety", b =>
                {
                    b.HasOne("MedRecPro.Models.Label+IdentifiedSubstance", null)
                        .WithMany("Moieties")
                        .HasForeignKey("IdentifiedSubstanceID");
                });

            modelBuilder.Entity("MedRecPro.Models.Label+OrganizationIdentifier", b =>
                {
                    b.HasOne("MedRecPro.Models.Label+Organization", "Organization")
                        .WithMany("OrganizationIdentifiers")
                        .HasForeignKey("OrganizationID");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("MedRecPro.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("MedRecPro.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedRecPro.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("MedRecPro.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedRecPro.Models.Label+IdentifiedSubstance", b =>
                {
                    b.Navigation("Moieties");
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Moiety", b =>
                {
                    b.Navigation("Characteristics");
                });

            modelBuilder.Entity("MedRecPro.Models.Label+Organization", b =>
                {
                    b.Navigation("OrganizationIdentifiers");
                });
#pragma warning restore 612, 618
        }
    }
}
