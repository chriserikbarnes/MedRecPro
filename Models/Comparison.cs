using MedRecPro.Service;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;

namespace MedRecPro.Models
{
    #region comparison request models

    // Enhanced model classes for MedRecPro AI comparison integration
    /// <summary>
    /// Represents a request to generate a comparison report between SPL XML and JSON representations.
    /// This model is used to initiate the AI-powered analysis of label data completeness.
    /// </summary>
    /// <remarks>
    /// The comparison process validates that all data from the original SPL XML file 
    /// has been accurately represented in the corresponding JSON format.
    /// </remarks>
    /// <example>
    /// <code>
    /// var request = new ComparisonRequest 
    /// {
    ///     FileId = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    ///     AdditionalInstructions = "Focus on clinical trial data and drug interaction completeness"
    /// };
    /// </code>
    /// </example>
    /// <seealso cref="ComparisonResponse"/>
    /// <seealso cref="ComparisonResult"/>
    public class ComparisonRequest
    {
        #region implementation

        /// <summary>
        /// Gets or sets the unique identifier for the uploaded SPL file to be compared.
        /// This identifier is generated during the file upload process and used to retrieve
        /// both XML and JSON representations for comparison.
        /// </summary>
        /// <seealso cref="ComparisonResponse.FileId"/>
        [Required]
        public string FileId { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets optional additional instructions for the AI comparison analysis.
        /// These instructions can specify particular areas of focus or special requirements
        /// for the comparison process.
        /// </summary>
        /// <remarks>
        /// Common instructions include focusing on specific sections like clinical trials,
        /// drug interactions, dosage information, or contraindications.
        /// </remarks>
        /// <example>
        /// Examples: "Focus on safety data completeness", "Emphasize drug interaction analysis"
        /// </example>
        public string? AdditionalInstructions { get; set; }

        #endregion
    }

    #endregion

    #region comparison response models

    // Enhanced model classes for MedRecPro AI comparison integration
    /// <summary>
    /// Represents the response from a comparison analysis operation, containing the file information
    /// and detailed comparison results generated by the AI system.
    /// </summary>
    /// <remarks>
    /// This response provides comprehensive information about the comparison between SPL XML
    /// and JSON representations, including completeness metrics and identified issues.
    /// </remarks>
    /// <example>
    /// <code>
    /// var response = new ComparisonResponse
    /// {
    ///     FileId = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    ///     FileName = "sample-spl.xml",
    ///     Result = new ComparisonResult { IsComplete = true },
    ///     GeneratedAt = DateTime.UtcNow
    /// };
    /// </code>
    /// </example>
    /// <seealso cref="ComparisonRequest"/>
    /// <seealso cref="ComparisonResult"/>
    public class ComparisonResponse
    {
        #region implementation

        /// <summary>
        /// Gets or sets the unique identifier of the compared file, matching the original request.
        /// This provides traceability between the request and response.
        /// </summary>
        /// <seealso cref="ComparisonRequest.FileId"/>
        public string FileId { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the original name of the uploaded SPL file that was analyzed.
        /// This helps users identify which file the comparison results refer to.
        /// </summary>
        public string FileName { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the detailed comparison analysis results generated by the AI system.
        /// Contains all findings, metrics, and identified issues from the comparison process.
        /// </summary>
        /// <seealso cref="ComparisonResult"/>
        public ComparisonResult Result { get; set; } = new();

        /// <summary>
        /// Gets or sets the UTC timestamp when the comparison analysis was completed.
        /// This provides audit trail information for the comparison operation.
        /// </summary>
        public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;

        #endregion
    }

    #endregion

    #region comparison result models

    // Enhanced model classes for MedRecPro AI comparison integration
    /// <summary>
    /// Contains the detailed results of the AI comparison analysis between SPL XML and JSON formats.
    /// Provides comprehensive information about data completeness, identified issues, and metrics.
    /// </summary>
    /// <remarks>
    /// The comparison result represents the AI's assessment of whether all data from the original
    /// SPL XML has been accurately preserved in the JSON representation, along with detailed
    /// analysis and quantitative metrics.
    /// </remarks>
    /// <example>
    /// <code>
    /// var result = new ComparisonResult
    /// {
    ///     IsComplete = true,
    ///     Summary = "✅ COMPLETE DATA REPRESENTATION - All data from XML is present in JSON",
    ///     DetailedAnalysis = "Systematic comparison shows...",
    ///     Issues = new List&lt;ComparisonIssue&gt;(),
    ///     Metrics = new ComparisonMetrics { CompletionPercentage = 100.0 }
    /// };
    /// </code>
    /// </example>
    /// <seealso cref="ComparisonResponse"/>
    /// <seealso cref="ComparisonIssue"/>
    /// <seealso cref="ComparisonMetrics"/>
    public class ComparisonResult
    {
        #region implementation

        /// <summary>
        /// Gets or sets a value indicating whether the JSON representation contains all data
        /// from the original SPL XML file. True indicates complete data preservation.
        /// </summary>
        /// <seealso cref="ComparisonMetrics.CompletionPercentage"/>
        public bool IsComplete { get; set; }

        /// <summary>
        /// Gets or sets a concise summary of the comparison results, typically including
        /// an overall assessment and key findings from the AI analysis.
        /// </summary>
        /// <remarks>
        /// Summary often starts with ✅ for complete data or ❌ for incomplete data,
        /// followed by a brief explanation of the findings.
        /// </remarks>
        public string Summary { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the comprehensive detailed analysis provided by the AI system,
        /// including methodology, findings, and reasoning behind the comparison results.
        /// </summary>
        /// <remarks>
        /// Contains the full AI-generated analysis explaining how the comparison was performed,
        /// what sections were examined, and detailed findings for each area.
        /// </remarks>
        public string DetailedAnalysis { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the list of specific issues identified during the comparison process.
        /// Empty list indicates no issues were found.
        /// </summary>
        /// <seealso cref="ComparisonIssue"/>
        public List<ComparisonIssue> Issues { get; set; } = new();

        /// <summary>
        /// Gets or sets the quantitative metrics calculated during the comparison analysis,
        /// providing measurable data about the completeness assessment.
        /// </summary>
        /// <seealso cref="ComparisonMetrics"/>
        public ComparisonMetrics Metrics { get; set; } = new();

        #endregion
    }

    #endregion

    #region comparison issue models

    // Enhanced model classes for MedRecPro AI comparison integration
    /// <summary>
    /// Represents a specific issue or discrepancy identified during the comparison analysis
    /// between SPL XML and JSON representations.
    /// </summary>
    /// <remarks>
    /// Issues can range from missing data sections to mismatched values or structural
    /// differences between the XML and JSON formats. Each issue includes contextual
    /// information to help users understand and address the problem.
    /// </remarks>
    /// <example>
    /// <code>
    /// var issue = new ComparisonIssue
    /// {
    ///     Type = "Missing",
    ///     Section = "Drug Interactions",
    ///     Description = "Drug interaction section present in XML but missing in JSON",
    ///     Severity = "High"
    /// };
    /// </code>
    /// </example>
    /// <seealso cref="ComparisonResult.Issues"/>
    public class ComparisonIssue
    {
        #region implementation

        /// <summary>
        /// Gets or sets the type classification of the identified issue.
        /// Common types include "Missing", "Mismatch", and "Warning".
        /// </summary>
        /// <remarks>
        /// - "Missing": Data present in XML but absent in JSON
        /// - "Mismatch": Data differs between XML and JSON representations
        /// - "Warning": Potential concerns that may require attention
        /// </remarks>
        public string Type { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the specific section or area of the SPL document where the issue was found.
        /// This helps users locate and address the identified problem.
        /// </summary>
        /// <example>
        /// Examples: "Drug Interactions", "Dosage and Administration", "Clinical Pharmacology"
        /// </example>
        public string Section { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets a detailed description of the identified issue, explaining what
        /// was found and why it represents a problem in the data comparison.
        /// </summary>
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the severity level of the issue, indicating its importance
        /// and priority for resolution. Values include "High", "Medium", and "Low".
        /// </summary>
        /// <remarks>
        /// - "High": Critical issues affecting data integrity or safety information
        /// - "Medium": Important issues that should be addressed but aren't critical
        /// - "Low": Minor issues or formatting differences
        /// </remarks>
        public string Severity { get; set; } = string.Empty;

        #endregion
    }

    #endregion

    #region comparison metrics models

    // Enhanced model classes for MedRecPro AI comparison integration
    /// <summary>
    /// Provides quantitative metrics about the comparison analysis results,
    /// offering measurable data about the completeness and quality of data preservation.
    /// </summary>
    /// <remarks>
    /// These metrics provide objective measurements that complement the qualitative
    /// analysis, helping users understand the extent of data preservation between
    /// SPL XML and JSON formats.
    /// </remarks>
    /// <example>
    /// <code>
    /// var metrics = new ComparisonMetrics
    /// {
    ///     TotalSections = 25,
    ///     CompleteSections = 23,
    ///     MissingSections = 2,
    ///     CompletionPercentage = 92.0
    /// };
    /// </code>
    /// </example>
    /// <seealso cref="ComparisonResult.Metrics"/>
    /// <seealso cref="ComparisonResult.IsComplete"/>
    public class ComparisonMetrics
    {
        #region implementation

        /// <summary>
        /// Gets or sets the total number of sections identified in the original SPL XML document.
        /// This represents the baseline count for comparison analysis.
        /// </summary>
        /// <seealso cref="CompleteSections"/>
        /// <seealso cref="MissingSections"/>
        public int TotalSections { get; set; }

        /// <summary>
        /// Gets or sets the number of sections that were successfully preserved in the JSON
        /// representation with complete and accurate data.
        /// </summary>
        /// <seealso cref="TotalSections"/>
        /// <seealso cref="CompletionPercentage"/>
        public int CompleteSections { get; set; }

        /// <summary>
        /// Gets or sets the number of sections from the XML that are missing or incomplete
        /// in the JSON representation.
        /// </summary>
        /// <remarks>
        /// This value should equal TotalSections minus CompleteSections and represents
        /// areas requiring attention to achieve complete data preservation.
        /// </remarks>
        /// <seealso cref="TotalSections"/>
        /// <seealso cref="CompleteSections"/>
        public int MissingSections { get; set; }

        /// <summary>
        /// Gets or sets the calculated percentage of data completeness, representing
        /// the ratio of complete sections to total sections multiplied by 100.
        /// </summary>
        /// <remarks>
        /// A value of 100.0 indicates perfect data preservation, while lower values
        /// indicate areas where data may be missing or incomplete in the JSON format.
        /// </remarks>
        /// <seealso cref="CompleteSections"/>
        /// <seealso cref="TotalSections"/>
        public double CompletionPercentage { get; set; }

        #endregion
    }

    #region document comparison result models

    /**************************************************************/
    /// <summary>
    /// Represents the comprehensive results of an AI-powered comparison analysis between
    /// SPL XML source data and its corresponding DTO JSON representation. This model
    /// contains completeness assessment, identified differences, and detailed metrics
    /// for medical document transformation validation.
    /// </summary>
    /// <remarks>
    /// This result model is specifically designed for SPL (Structured Product Labeling)
    /// document analysis, providing structured feedback on data preservation during
    /// XML-to-DTO transformation processes. The model supports regulatory compliance
    /// validation and data integrity assessment for pharmaceutical documentation systems.
    /// 
    /// The analysis results include both quantitative metrics (completion percentages,
    /// difference counts) and qualitative assessments (detailed findings, recommendations)
    /// to support comprehensive document validation workflows.
    /// </remarks>
    /// <example>
    /// <code>
    /// var result = new DocumentComparisonResult
    /// {
    ///     DocumentGuid = Guid.Parse("12345678-1234-1234-1234-123456789012"),
    ///     IsComplete = true,
    ///     CompletionPercentage = 95.5,
    ///     Summary = "High data preservation with minor formatting differences",
    ///     Differences = new List&lt;DocumentComparisonDifference&gt;
    ///     {
    ///         new DocumentComparisonDifference
    ///         {
    ///             Type = "Missing",
    ///             Section = "ClinicalPharmacology",
    ///             Description = "Pharmacokinetics subsection formatting differs",
    ///             Severity = "Medium"
    ///         }
    ///     },
    ///     GeneratedAt = DateTime.UtcNow
    /// };
    /// </code>
    /// </example>
    /// <seealso cref="DocumentComparisonDifference"/>
    /// <seealso cref="Label.Document"/>
    /// <seealso cref="IClaudeApiService"/>
    /// <summary>
    /// Represents the comprehensive results of an AI-powered comparison analysis between
    /// SPL XML source data and its corresponding DTO JSON representation.
    /// </summary>
    public class DocumentComparisonResult
    {
        #region identification properties

        /// <summary>
        /// Gets or sets the unique GUID identifier of the SPL document that was analyzed.
        /// </summary>
        [JsonPropertyName("documentGuid")]
        public Guid DocumentGuid { get; set; }

        /// <summary>
        /// Gets or sets the timestamp when this comparison analysis was generated.
        /// </summary>
        [JsonPropertyName("generatedAt")]
        public DateTime GeneratedAt { get; set; }

        #endregion

        #region completion assessment properties

        /// <summary>
        /// Gets or sets a value indicating whether the DTO representation completely
        /// preserves all data from the original XML source.
        /// </summary>
        [JsonPropertyName("isComplete")]
        public bool IsComplete { get; set; }

        /// <summary>
        /// Gets or sets the numerical completion percentage representing the degree
        /// of data preservation between XML source and DTO representation.
        /// </summary>
        [JsonPropertyName("completionPercentage")]
        public double CompletionPercentage { get; set; }

        /// <summary>
        /// Gets or sets a concise summary of the comparison analysis findings.
        /// </summary>
        [JsonPropertyName("summary")]
        public string Summary { get; set; } = string.Empty;

        #endregion

        #region detailed analysis properties

        /// <summary>
        /// Gets or sets the structured detailed analysis as a list of analysis sections,
        /// where each string represents a complete analysis section (e.g., "Overall Assessment",
        /// "Completeness Assessment", etc.) for improved readability and UI rendering.
        /// </summary>
        /// <remarks>
        /// Each element in the list represents a major analysis section with complete
        /// content that can be rendered as separate paragraphs or sections in the UI.
        /// This structure eliminates escape character issues and provides better control
        /// over formatting and display of detailed analysis results.
        /// 
        /// Typical sections include:
        /// - Overall Assessment
        /// - Completeness Assessment  
        /// - Structural Integrity
        /// - Data Accuracy
        /// - Medical Content Validation
        /// - Regulatory Compliance
        /// - Impact Assessment
        /// - Conclusion
        /// </remarks>
        [JsonPropertyName("detailedAnalysis")]
        public List<string> DetailedAnalysis { get; set; } = new List<string>();

        /// <summary>
        /// Gets or sets the collection of specific differences and issues identified
        /// during the comparison analysis.
        /// </summary>
        [JsonPropertyName("differences")]
        public List<DocumentComparisonDifference> Differences { get; set; } = new List<DocumentComparisonDifference>();

        #endregion
    }

    /**************************************************************/
    /// <summary>
    /// Represents a specific difference or issue identified during SPL document comparison
    /// analysis between XML source and DTO representation. This model provides detailed
    /// information about data preservation problems, missing elements, or transformation
    /// errors that require attention for maintaining data integrity.
    /// </summary>
    /// <remarks>
    /// Each difference represents a discrete issue found during AI-powered comparison
    /// analysis, providing categorization, location information, and severity assessment
    /// to enable targeted remediation efforts. The model supports prioritization of
    /// fixes based on medical importance and regulatory compliance requirements.
    /// 
    /// Differences are automatically classified by type and severity to help development
    /// teams focus on the most critical data preservation issues first, ensuring that
    /// patient safety and regulatory compliance concerns are addressed appropriately.
    /// </remarks>
    /// <example>
    /// <code>
    /// var difference = new DocumentComparisonDifference
    /// {
    ///     Type = "Missing",
    ///     Section = "ClinicalPharmacology",
    ///     Description = "Pharmacokinetics subsection data not fully preserved in DTO",
    ///     Severity = "High"
    /// };
    /// </code>
    /// </example>
    /// <seealso cref="DocumentComparisonResult"/>
    /// <seealso cref="Label.Document"/>
    public class DocumentComparisonDifference
    {
        #region classification properties

        /**************************************************************/
        /// <summary>
        /// Gets or sets the type classification of this difference, categorizing
        /// the nature of the data preservation issue for systematic analysis
        /// and remediation planning.
        /// </summary>
        /// <remarks>
        /// Common difference types include:
        /// - Missing: Data present in XML but absent in DTO
        /// - Mismatch: Data present in both but with different values
        /// - Incomplete: Data partially preserved with some loss
        /// - Structural: Hierarchical or organizational differences
        /// - General: Other unclassified differences
        /// </remarks>
        [JsonPropertyName("type")]
        public string Type { get; set; } = string.Empty;

        /**************************************************************/
        /// <summary>
        /// Gets or sets the SPL document section where this difference was identified,
        /// providing location context for targeted remediation efforts and impact
        /// assessment of the data preservation issue.
        /// </summary>
        /// <remarks>
        /// Section names typically correspond to standard SPL document structure
        /// including ClinicalPharmacology, Dosage, Administration, Contraindications,
        /// Warnings, AdverseReactions, DrugInteractions, and other regulatory sections.
        /// This information helps prioritize fixes based on medical importance.
        /// </remarks>
        [JsonPropertyName("section")]
        public string Section { get; set; } = string.Empty;

        /**************************************************************/
        /// <summary>
        /// Gets or sets the severity level of this difference, indicating the
        /// medical and regulatory importance of the data preservation issue
        /// for prioritization of remediation efforts.
        /// </summary>
        /// <remarks>
        /// Severity levels are classified as:
        /// - Critical: Safety-related data, dosage information, contraindications
        /// - High: Drug interactions, adverse reactions, clinical data
        /// - Medium: Missing or incomplete non-critical sections
        /// - Low: Formatting or minor structural differences
        /// 
        /// Critical and High severity differences should be addressed immediately
        /// to ensure patient safety and regulatory compliance.
        /// </remarks>
        [JsonPropertyName("severity")]
        public string Severity { get; set; } = string.Empty;

        #endregion

        #region description properties

        /**************************************************************/
        /// <summary>
        /// Gets or sets the detailed description of this specific difference,
        /// providing comprehensive information about the data preservation issue
        /// including context, impact, and specific elements affected.
        /// </summary>
        /// <remarks>
        /// The description contains human-readable explanation of the difference,
        /// typically including specific field names, data values, and context
        /// information that helps developers understand and address the issue.
        /// This text is suitable for technical documentation and remediation planning.
        /// </remarks>
        [JsonPropertyName("description")]
        public string Description { get; set; } = string.Empty;

        #endregion
    }

    #endregion


    #endregion

    #region comparison status
    /**************************************************************/
    /// <summary>
    /// Represents the current status and progress of a document comparison analysis operation.
    /// </summary>
    /// <remarks>
    /// This model tracks the progress of background document comparison analysis operations,
    /// providing status updates, completion percentage, and results when available.
    /// Used for monitoring long-running comparison operations that leverage AI analysis.
    /// </remarks>
    /// <seealso cref="DocumentComparisonResult"/>
    /// <seealso cref="Label"/>
    public class ComparisonOperationStatus
    {
        #region implementation

        /**************************************************************/
        /// <summary>
        /// Gets or sets the unique identifier for this comparison operation.
        /// </summary>
        /// <seealso cref="Label"/>
        public string? OperationId { get; set; }

        /**************************************************************/
        /// <summary>
        /// Gets or sets the current status of the comparison operation.
        /// </summary>
        /// <remarks>
        /// Valid statuses include: Queued, Processing, Completed, Canceled, Failed.
        /// </remarks>
        /// <seealso cref="Label"/>
        public string Status { get; set; } = "Queued";

        /**************************************************************/
        /// <summary>
        /// Gets or sets the completion percentage of the comparison operation.
        /// </summary>
        /// <remarks>
        /// Value ranges from 0 to 100, representing the progress of the analysis.
        /// </remarks>
        /// <seealso cref="Label"/>
        public int PercentComplete { get; set; }

        /**************************************************************/
        /// <summary>
        /// Gets or sets the URL for checking progress of this operation.
        /// </summary>
        /// <seealso cref="Label"/>
        public string? ProgressUrl { get; set; }

        /**************************************************************/
        /// <summary>
        /// Gets or sets the document GUID being analyzed.
        /// </summary>
        /// <seealso cref="Label"/>
        public Guid DocumentGuid { get; set; }

        /**************************************************************/
        /// <summary>
        /// Gets or sets the comparison analysis result when the operation completes successfully.
        /// </summary>
        /// <seealso cref="DocumentComparisonResult"/>
        /// <seealso cref="Label"/>
        public DocumentComparisonResult? Result { get; set; }

        /**************************************************************/
        /// <summary>
        /// Gets or sets any error message if the operation fails.
        /// </summary>
        /// <seealso cref="Label"/>
        public string? Error { get; set; }

        /**************************************************************/
        /// <summary>
        /// Gets or sets the timestamp when the operation was initiated.
        /// </summary>
        /// <seealso cref="Label"/>
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        /**************************************************************/
        /// <summary>
        /// Gets or sets the timestamp when the operation was last updated.
        /// </summary>
        /// <seealso cref="Label"/>
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        #endregion
    }
    #endregion
}