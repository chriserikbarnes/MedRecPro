using MedRecPro.DataAccess;
using MedRecPro.Helpers;
using MedRecPro.Service;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace MedRecPro.Models
{
    /**************************************************************/
    /// <summary>
    /// Represents SPL (Structured Product Labeling) XML data stored in the database.
    /// This model corresponds to the SplData table and contains the raw XML content
    /// along with metadata for tracking and archival purposes.
    /// </summary>
    /// <remarks>
    /// This class is used to store XML content from SPL import operations.
    /// Each record represents a single XML document with associated user and timestamp information.
    /// The Archive field allows for soft deletion of records.
    /// </remarks>
    /// <seealso cref="Label"/>
    /// <seealso cref="Repository{T}"/>
    /// <seealso cref="SplImportService"/>
    [Table("SplData")]
    public class SplData
    {
        #region Properties

        /**************************************************************/
        /// <summary>
        /// Gets or sets the unique identifier for the SPL data record.
        /// This is the primary key and is auto-generated by the database.
        /// </summary>
        /// <seealso cref="Repository{T}"/>
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public long SplDataID { get; set; }

        /**************************************************************/
        /// <summary>
        /// Gets or sets the ID of the user who created this SPL data record.
        /// This references the AspNetUsers table and can be null for system-generated records.
        /// </summary>
        /// <seealso cref="User"/>
        public long? AspNetUsersID { get; set; }

        /**************************************************************/
        /// <summary>
        /// Gets or sets the unique GUID identifier for this SPL data record.
        /// This provides an alternative unique identifier for the record.
        /// </summary>
        /// <remarks>
        /// This GUID can be used for external references or for ensuring uniqueness
        /// across different environments or systems.
        /// </remarks>
        [Required]
        public Guid SplDataGUID { get; set; }

        /**************************************************************/
        /// <summary>
        /// Gets or sets the raw XML content of the SPL document.
        /// This contains the complete XML structure as imported from the source file.
        /// </summary>
        /// <remarks>
        /// The XML content should be valid SPL format according to FDA guidelines.
        /// This field is stored as nvarchar(max) in the database to accommodate large documents.
        /// </remarks>
        /// <seealso cref="SplImportService"/>
        /// <seealso cref="SplXmlParser"/>
        [Required]
        [Column(TypeName = "nvarchar(max)")]
        public string SplXML { get; set; } = string.Empty;

        /**************************************************************/
        /// <summary>
        /// Gets or sets a value indicating whether this SPL data record is archived.
        /// Archived records are not deleted but are marked as inactive.
        /// </summary>
        /// <remarks>
        /// Default value is false (not archived). This provides soft deletion capability.
        /// </remarks>
        public bool? Archive { get; set; }

        /**************************************************************/
        /// <summary>
        /// Gets or sets the timestamp when this SPL data record was created.
        /// This is automatically set to UTC time when the record is created.
        /// </summary>
        /// <remarks>
        /// The database default is getutcdate(), but this can be overridden in code if needed.
        /// </remarks>
        public DateTime? LogDate { get; set; }

        /**************************************************************/
        /// <summary>
        /// Gets or sets the hexadecimal hash value representing the cryptographic 
        /// hash of the SplXML content. Used for data integrity verification, 
        /// duplicate detection, and caching optimization.
        /// </summary>
        /// <remarks>
        /// Typically contains SHA-256 hash in hexadecimal format (64 characters).
        /// NULL values indicate hash has not been computed.
        /// </remarks>
        [Column(TypeName = "char(64)")]
        public string? SplXMLHash { get; set; }

        /**************************************************************/
        /// <summary>
        /// Gets or sets the encrypted ID for this SPL data record.
        /// This property is used for external API communication and is not stored in the database.
        /// </summary>
        /// <remarks>
        /// This property is populated by the data access layer when retrieving records
        /// and is used in controllers for secure ID transmission.
        /// </remarks>
        /// <seealso cref="StringCipher"/>
        [NotMapped]
        public string? EncryptedSplDataId { get; set; }

        #endregion

        #region Constructors

        /**************************************************************/
        /// <summary>
        /// Initializes a new instance of the <see cref="SplData"/> class with default values.
        /// </summary>
        /// <remarks>
        /// Sets default values for Archive (false) and LogDate (current UTC time).
        /// Generates a new GUID for the SplDataGUID property.
        /// </remarks>
        public SplData()
        {
            #region implementation
            SplDataGUID = Guid.NewGuid();
            Archive = false;
            LogDate = DateTime.UtcNow;
            #endregion
        }

        /**************************************************************/
        /// <summary>
        /// Initializes a new instance of the <see cref="SplData"/> class with the specified XML content.
        /// </summary>
        /// <param name="xmlContent">The SPL XML content to store.</param>
        /// <param name="splDataGuid">The Guid assigned by the imported XML filename</param>
        /// <param name="userId">Optional user ID who is creating this record.</param>
        /// <exception cref="ArgumentException">Thrown when xmlContent is null or empty.</exception>
        /// <remarks>
        /// This constructor is useful when creating new SPL data records during import operations.
        /// </remarks>
        /// <seealso cref="SplImportService"/>
        public SplData(string xmlContent, Guid splDataGuid, long? userId = null) : this()
        {
            #region implementation
            if (string.IsNullOrWhiteSpace(xmlContent))
            {
                throw new ArgumentException("XML content cannot be null or empty.", nameof(xmlContent));
            }

            SplXML = xmlContent;
            SplDataGUID = splDataGuid != Guid.Empty ? splDataGuid : Guid.NewGuid();
            AspNetUsersID = userId;
            #endregion
        }

        #endregion
    }
}