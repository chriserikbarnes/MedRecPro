@using MedRecPro.Models
@using MedRecPro.Services
@using RazorLight.Razor
@using MedRecPro.Helpers
@inherits RazorLight.TemplatePage<MedRecPro.Models.StructuredBodyDto>
@model StructuredBodyDto
@{
    if (Model == null)
    {
        return;
    }

    var hierarchyService = new SectionHierarchyService();
    var organizedSections = hierarchyService.OrganizeSections(Model);

    var hasStandaloneSections = Model.HasStandaloneSections(organizedSections);
    var hasHierarchicalSections = Model.HasHierarchicalSections(organizedSections);

    var allSections = Model.GetAllValidSections();
    var sectionLookup = Model.CreateSectionLookup(allSections);
}
<structuredBody>
    @if (hasStandaloneSections)
    {
        foreach (var standaloneSection in organizedSections.StandaloneSections)
        {
            var standaloneContext = new SectionRenderingContext
            {
                Section = standaloneSection,
                Children = new List<SectionDto>(),
                IsStandalone = true
            };

            <component>
                @{
                    await IncludeAsync("_Section", standaloneContext);
                }
            </component>
        }
    }

    @if (hasHierarchicalSections)
    {
        foreach (var rootSection in organizedSections.RootSections)
        {
            var children = hierarchyService.BuildChildSections(
                rootSection.SectionID!.Value,
                Model.GetSectionHierarchies(),
                sectionLookup
            );

            var hierarchicalContext = new SectionRenderingContext
            {
                Section = rootSection,
                Children = children,
                IsStandalone = false
            };

            <component>
                @{
                    await IncludeAsync("_Section", hierarchicalContext);
                }
            </component>
        }
    }
</structuredBody>