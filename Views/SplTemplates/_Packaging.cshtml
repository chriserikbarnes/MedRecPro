@using MedRecPro.Models;
@using RazorLight.Razor;
@using MedRecPro.Helpers;
@inherits RazorLight.TemplatePage<MedRecPro.Models.PackagingLevelDto>;
@model PackagingLevelDto

<asContent>
    <quantity>
        <numerator value="@Model?.QuantityNumerator?.ToString("G29")">
            <translation code="@Model.PackageCode" codeSystem="@Model.PackageCodeSystem" displayName="@Model.PackageFormDisplayName" value="@Model?.QuantityNumerator?.ToString("G29")" />
        </numerator>
        <denominator value="@Model?.QuantityDenominator?.ToString("G29")">
            <translation code="@Model.PackageCode" codeSystem="@Model.PackageCodeSystem" displayName="@Model.PackageFormDisplayName" value="@Model?.QuantityDenominator?.ToString("G29")" />
        </denominator>
    </quantity>
    <containerPackagedMedicine>
        @* This part needs to be built from PackageIdentifier table, not directly from PackagingLevel in the sample DTO *@
        @* <code code="0054-8221-25" codeSystem="2.16.840.1.113883.6.69" codeSystemName="NDC" /> *@
        <formCode code="@Model.PackageFormCode" codeSystem="@Model.PackageCodeSystem" displayName="@Model.PackageFormDisplayName" />

        @* Recursive call for nested packaging *@
        @if (Model.PackagingHierarchy != null)
        {
            foreach (var hierarchy in Model.PackagingHierarchy)
            {
                // FIX: Use hierarchy.ChildPackagingLevel if available, otherwise request clarification for correct property
                var innerPackage = hierarchy.ChildPackagingLevel;
                if (innerPackage != null)
                {
                    await IncludeAsync("_Packaging", innerPackage);
                }
            }
        }
    </containerPackagedMedicine>
</asContent>