@using MedRecPro.Models;
@using RazorLight.Razor;
@using MedRecPro.Helpers;
@inherits RazorLight.TemplatePage<MedRecPro.Models.PackagingLevelDto>;
@model PackagingLevelDto

@{
    var packageIdentifiers = Model?.PackageIdentifiers?
        .Where(pi => !string.IsNullOrEmpty(pi.IdentifierValue))
        .OrderBy(pi => pi.PackageIdentifierID);

    var childPackaging = Model?.PackagingHierarchy?
        .Where(h => h.ChildPackagingLevel != null)
        .OrderBy(h => h.SequenceNumber);
}
<asContent>
    <quantity>
        <numerator @SplTemplateHelpers.Attribute("value", Model?.QuantityNumerator?.ToString("G29"))>
            @if (!string.IsNullOrEmpty(Model?.PackageCode))
            {
                <translation @SplTemplateHelpers.Attribute("code", Model.PackageCode) @SplTemplateHelpers.Attribute("codeSystem", Model.PackageCodeSystem) @SplTemplateHelpers.Attribute("displayName", Model.PackageFormDisplayName)  @SplTemplateHelpers.Attribute("value", Model?.QuantityNumerator?.ToString("G29")) />
            }
        </numerator>
        <denominator @SplTemplateHelpers.Attribute("value", Model?.QuantityDenominator?.ToString("G29"))>
            <translation @SplTemplateHelpers.Attribute("value", Model?.QuantityDenominator?.ToString("G29")) />
        </denominator>
    </quantity>
    <containerPackagedMedicine>
        @if (packageIdentifiers != null)
        {
            foreach (var identifier in packageIdentifiers)
            {
                <code @SplTemplateHelpers.Attribute("code", identifier.IdentifierValue) @SplTemplateHelpers.Attribute("codeSystem", identifier.IdentifierSystemOID) @SplTemplateHelpers.Attribute("codeSystemName", identifier.IdentifierType ?? "NDC") />
            }
        }
        <formCode @SplTemplateHelpers.Attribute("code", Model?.PackageFormCode) @SplTemplateHelpers.Attribute("codeSystem", Model?.PackageCodeSystem) @SplTemplateHelpers.Attribute("displayName", Model?.PackageFormDisplayName) />
        @if (childPackaging != null)
        {
            foreach (var hierarchy in childPackaging)
            {
                if (hierarchy.ChildPackagingLevel != null)
                {
                    await IncludeAsync("_Packaging", hierarchy.ChildPackagingLevel);
                }
            }
        }
    </containerPackagedMedicine>
</asContent>