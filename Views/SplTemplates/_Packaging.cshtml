@using MedRecPro.Models
@using MedRecPro.Helpers
@using MedRecPro.Service
@inherits RazorLight.TemplatePage<MedRecPro.Models.PackageRendering>
@model PackageRendering

@* Template with package-level characteristic rendering *@
@if (Model != null && Model.HasValidData)
{
    var packagingModel = Model.PackagingLevelDto;

    <asContent>
        @* Quantity (with numerator/denominator) *@
        @if (Model.HasQuantity)
        {
            <quantity>
                <numerator @SplTemplateHelpers.Attribute("value", Model.FormattedQuantityNumerator)
                           @SplTemplateHelpers.Attribute("unit", Model.NumeratorUnit) />
                <denominator @SplTemplateHelpers.Attribute("value", Model.FormattedQuantityDenominator) />
            </quantity>
        }

        <containerPackagedProduct>
            @* NDCs for this packaging level *@
            @if (Model.HasPackageIdentifiers && Model.OrderedPackageIdentifiers != null)
            {
                foreach (var identifier in Model.OrderedPackageIdentifiers)
                {
                    <code @SplTemplateHelpers.Attribute("code", identifier.IdentifierValue)
                          @SplTemplateHelpers.Attribute("codeSystem", identifier.IdentifierSystemOID) />
                }
            }
            else
            {
                <code />
            }

            @* Form code *@
            @if (Model.HasFormCode)
            {
                <formCode @SplTemplateHelpers.Attribute("code", Model.PackageFormCode)
                          @SplTemplateHelpers.Attribute("codeSystem", Model.PackageFormCodeSystem)
                          @SplTemplateHelpers.Attribute("displayName", Model.PackageFormDisplayName) />
            }

            @* Nested child packaging *@
            @if (Model.HasChildPackageRendering && Model.ChildPackageRendering != null)
            {
                foreach (var childPackage in Model.ChildPackageRendering)
                {
                    @* Recursive inclusion creates nested <asContent> structure *@
                    await IncludeAsync("_Packaging", childPackage);
                }
            }
        </containerPackagedProduct>

        @* Package-level characteristics *@
        @if (packagingModel != null &&
            packagingModel.Characteristics != null &&
            packagingModel.Characteristics.Any())
        {
            var characteristicService = new CharacteristicRenderingService();

            foreach (var characteristic in packagingModel.Characteristics)
            {
                var enhancedCharacteristic = characteristicService.PrepareForRendering(characteristic);

                <subjectOf>
                    @{
                        await IncludeAsync("_Characteristic", enhancedCharacteristic);
                    }
                </subjectOf>
            }
        }

        @* Marketing acts for this package level *@
        @if (Model.HasMarketing && packagingModel != null && packagingModel.MarketingStatuses != null)
        {
            foreach (var marketing in packagingModel.MarketingStatuses)
            {
                <subjectOf>
                    <marketingAct>
                        <code @SplTemplateHelpers.Attribute("code", marketing.MarketingActCode)
                              @SplTemplateHelpers.Attribute("codeSystem", marketing.MarketingActCodeSystem) />
                        <statusCode @SplTemplateHelpers.Attribute("code", marketing.StatusCode) />
                        <effectiveTime>
                            @if (marketing.EffectiveStartDate.HasValue)
                            {
                                <low @SplTemplateHelpers.Attribute("value", SplTemplateHelpers.ToSplDate(marketing.EffectiveStartDate)) />
                            }
                            @if (marketing.EffectiveEndDate.HasValue)
                            {
                                <high @SplTemplateHelpers.Attribute("value", SplTemplateHelpers.ToSplDate(marketing.EffectiveEndDate)) />
                            }
                        </effectiveTime>
                    </marketingAct>
                </subjectOf>
            }
        }
    </asContent>
}
