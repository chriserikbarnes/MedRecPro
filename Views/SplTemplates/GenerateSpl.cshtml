@using MedRecPro.Models;
@using MedRecPro.Helpers;
@inherits RazorLight.TemplatePage<MedRecPro.Models.DocumentRendering>;
@model DocumentRendering;

@* Enhanced template with hierarchical author rendering support *@
@if (Model != null)
{
    var documentModel = Model.DocumentDto;
    
    @if (Model.HasValidDocument)
    {
<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="https://www.accessdata.fda.gov/spl/stylesheet/spl.xsl" type="text/xsl"?>
<document xmlns="urn:hl7-org:v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:hl7-org:v3 https://www.accessdata.fda.gov/spl/schema/spl.xsd">  
    <id @SplTemplateHelpers.Attribute("root", Model.IdRoot) />
    
    @if (Model.HasDocumentCode)
    {
        <code @SplTemplateHelpers.Attribute("code", Model.DocumentCode) @SplTemplateHelpers.Attribute("codeSystem", Model.DocumentCodeSystem) @SplTemplateHelpers.Attribute("displayName", Model.DocumentDisplayName) />
    }
    
    @if (Model.HasDocumentTitle)
    {
        <title>@Raw(Model.DocumentTitle)</title>
    }
    
    @if (Model.HasEffectiveTime)
    {
        <effectiveTime @SplTemplateHelpers.Attribute("value", Model.EffectiveTimeFormatted) />
    }
    
    <setId @SplTemplateHelpers.Attribute("root", Model.SetIdRoot) />
    <versionNumber @SplTemplateHelpers.Attribute("value", Model.VersionNumber.ToString()) />
    
    @* Render authors with hierarchical structure if available *@
    @if (Model.HasRenderedAuthors && Model.RenderedAuthors != null)
    {
        foreach (var authorRendering in Model.RenderedAuthors)
        {
            if (authorRendering != null && authorRendering.HasAuthorOrganizationName)
            {
                await IncludeAsync("_AuthorHierarchical", authorRendering);               
            }
        }
    }
    else if (Model.OrderedAuthors != null)
    {
        @* Fallback to simple author rendering for backward compatibility *@
        foreach (var author in Model.OrderedAuthors)
        {
            if(author != null
            && author.Organization != null
            && !string.IsNullOrWhiteSpace(author.Organization.OrganizationName))
            {
                await IncludeAsync("_Author", author);     
            }
        }
    }
    else if (Model.HasPrimaryAuthorOrg)
    {
        @* Fallback for single author *@
        <author>
            <time />
            <assignedEntity>
                <representedOrganization>
                    <name>@Model.PrimaryAuthorOrgName</name>
                </representedOrganization>
            </assignedEntity>
        </author>
    }

    @* Render structured bodies if available *@
    @if (Model.OrderedStructuredBodies != null)
    {
        foreach (var structuredBody in Model.OrderedStructuredBodies)
        {
            <component>
                @{
                    await IncludeAsync("_StructuredBody", structuredBody);
                }
            </component>
        }
    }
    else
    {
        @* Provide error indication for missing structured bodies *@
        <!-- WARNING: No structured bodies found in document -->
    }
</document>
    }
    else
    {
        <errorMessage><!-- ERROR: Cannot generate SPL document. Missing required elements: @Model.ValidationErrorMessage -->  </errorMessage>
    }
}
else
{
    <errorMessage><!-- ERROR: No document data provided for SPL generation -->  </errorMessage>
}