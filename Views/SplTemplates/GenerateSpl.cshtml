@using MedRecPro.Models
@using MedRecPro.Helpers
@inherits RazorLight.TemplatePage<MedRecPro.Models.DocumentDto>
@model DocumentDto

@{
    var idRoot = SplTemplateHelpers.GuidUp(Model?.DocumentGUID) ?? "";
    var setIdRoot = SplTemplateHelpers.GuidUp(Model?.SetGUID) ?? "";
    var effTime = SplTemplateHelpers.ToSplDate(Model?.EffectiveTime) ?? "";

    // Document type code (LOINC) fields
    var docCode = Model?.DocumentCode ?? "";
    var docCodeSystem = Model?.DocumentCodeSystem ?? "";      // typically "2.16.840.1.113883.6.1"
    var docDisplayName = Model?.DocumentDisplayName ?? "";

    // Author organization (first author with an organization name)
    var authorOrgName = Model?.DocumentAuthors?
        .FirstOrDefault(a => a?.Organization?.OrganizationName != null)?
        .Organization?.OrganizationName ?? "";
}

<?xml version="1.0" encoding="utf-8" ?>
<document xmlns="urn:hl7-org:v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" classCode="DOCCLIN" moodCode="EVN">
    <id root="@idRoot" />
    @* Header code *@
    @if (!string.IsNullOrWhiteSpace(docCode) && !string.IsNullOrWhiteSpace(docCodeSystem))
    {
        <code code="@docCode" codeSystem="@docCodeSystem" displayName="@docDisplayName" />
    }

    @* Title: emit raw to preserve <br/> and inline links if present in downstream sections *@
    @* If you have a top-level title string, output here; most SPL titles are inside sections *@

    @* Effective Time *@
    @if (!string.IsNullOrWhiteSpace(effTime))
    {
        <effectiveTime value="@effTime" />
    }

    <setId root="@setIdRoot" />
    <versionNumber value="@(Model?.VersionNumber ?? 1)" />

    @* Author *@
    @if (!string.IsNullOrWhiteSpace(authorOrgName))
    {
        <author>
            <time />
            <assignedEntity>
                <representedOrganization>
                    <name>@authorOrgName</name>
                </representedOrganization>
            </assignedEntity>
        </author>
    }

    @* Structured Body (one or more) *@
    @if (Model?.StructuredBodies != null && Model.StructuredBodies.Any())
    {
        foreach (var sb in Model.StructuredBodies)
        {
            await IncludeAsync("_StructuredBody", sb);
        }
    }
</document>
