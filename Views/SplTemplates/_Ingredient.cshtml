@using MedRecPro.Models
@using MedRecPro.Helpers
@inherits RazorLight.TemplatePage<MedRecPro.Models.IngredientDto>
@model IngredientDto

@if (Model != null)
{
    var is_active = Model.OriginatingElement?.ToLower() == "activeingredient";

    if (is_active)
    {
        <activeIngredient>
            <quantity>
                <numerator @SplTemplateHelpers.Attribute("value", Model.QuantityNumerator?.ToString("G29")) @SplTemplateHelpers.Attribute("unit", Model.QuantityNumeratorUnit)>
                    @if (!string.IsNullOrEmpty(Model.NumeratorTranslationCode))
                    {
                        <translation @SplTemplateHelpers.Attribute("code", Model.NumeratorTranslationCode) @SplTemplateHelpers.Attribute("codeSystem", Model.NumeratorCodeSystem) @SplTemplateHelpers.Attribute("displayName", Model.NumeratorDisplayName) @SplTemplateHelpers.Attribute("value", Model.QuantityNumerator?.ToString("G29")) />
                    }
                </numerator>
                <denominator @SplTemplateHelpers.Attribute("value", Model.QuantityDenominator?.ToString("G29"))>
                    @if (!string.IsNullOrEmpty(Model.DenominatorTranslationCode))
                    {
                        <translation @SplTemplateHelpers.Attribute("code", Model.DenominatorTranslationCode) @SplTemplateHelpers.Attribute("codeSystem", Model.DenominatorCodeSystem) @SplTemplateHelpers.Attribute("displayName", Model.DenominatorDisplayName) @SplTemplateHelpers.Attribute("value", Model.QuantityDenominator?.ToString("G29")) />
                    }
                </denominator>
            </quantity>
            <activeIngredientSubstance>
                @if (Model.SpecifiedSubstances != null)
                {
                    foreach (var spec in Model.SpecifiedSubstances)
                    {
                        <code @SplTemplateHelpers.Attribute("code", spec.SubstanceCode) @SplTemplateHelpers.Attribute("codeSystem", spec.SubstanceCodeSystem) @SplTemplateHelpers.Attribute("codeSystemName", spec.SubstanceCodeSystemName) />
                    }
                }
                <name>@Model.IngredientSubstance?.SubstanceName</name>
                @if (Model.IngredientSubstance?.ActiveMoieties != null)
                {
                    foreach (var moiety in Model.IngredientSubstance.ActiveMoieties)
                    {
                        <activeMoiety>
                            <name>@moiety.MoietyName</name>
                        </activeMoiety>
                    }
                }
            </activeIngredientSubstance>
        </activeIngredient>
    }
    else
    {
        <inactiveIngredient>
            <inactiveIngredientSubstance>
                @if (Model.SpecifiedSubstances != null)
                {
                    foreach (var spec in Model.SpecifiedSubstances)
                    {
                        <code @SplTemplateHelpers.Attribute("code", spec.SubstanceCode) @SplTemplateHelpers.Attribute("codeSystem", spec.SubstanceCodeSystem) @SplTemplateHelpers.Attribute("codeSystemName", spec.SubstanceCodeSystemName) />
                    }
                }
                <name>@Model.IngredientSubstance?.SubstanceName</name>
            </inactiveIngredientSubstance>
        </inactiveIngredient>
    }
}