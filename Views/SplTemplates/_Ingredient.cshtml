@using MedRecPro.Models;
@using MedRecPro.Helpers;
@inherits RazorLight.TemplatePage<MedRecPro.Models.IngredientRendering>;
@model IngredientRendering;

@* Clean template with no business logic *@
@if (Model != null)
{
    var ingredient = Model.IngredientDto;

    @if (Model.IsActiveIngredient)
    {
        <activeIngredient>
            @if (Model.HasQuantity)
            {
                <quantity>
                    <numerator @SplTemplateHelpers.Attribute("value", Model.FormattedQuantityNumerator) @SplTemplateHelpers.Attribute("unit", ingredient.QuantityNumeratorUnit)>
                        @if (Model.HasNumeratorTranslation)
                        {
                            <translation @SplTemplateHelpers.Attribute("code", ingredient.NumeratorTranslationCode) @SplTemplateHelpers.Attribute("codeSystem", ingredient.NumeratorCodeSystem) @SplTemplateHelpers.Attribute("displayName", ingredient.NumeratorDisplayName) @SplTemplateHelpers.Attribute("value", Model.FormattedQuantityNumerator) />
                        }
                    </numerator>
                    <denominator @SplTemplateHelpers.Attribute("value", Model.FormattedQuantityDenominator)>
                        @if (Model.HasDenominatorTranslation)
                        {
                            <translation @SplTemplateHelpers.Attribute("code", ingredient.DenominatorTranslationCode) @SplTemplateHelpers.Attribute("codeSystem", ingredient.DenominatorCodeSystem) @SplTemplateHelpers.Attribute("displayName", ingredient.DenominatorDisplayName) @SplTemplateHelpers.Attribute("value", Model.FormattedQuantityDenominator) />
                        }
                    </denominator>
                </quantity>
            }

            <activeIngredientSubstance>
                @if (Model.HasSpecifiedSubstances && Model.OrderedSpecifiedSubstances != null)
                {
                    foreach (var substance in Model.OrderedSpecifiedSubstances)
                    {
                        <code @SplTemplateHelpers.Attribute("code", substance.SubstanceCode) @SplTemplateHelpers.Attribute("codeSystem", substance.SubstanceCodeSystem) @SplTemplateHelpers.Attribute("codeSystemName", substance.SubstanceCodeSystemName) />
                    }
                }
                else if (Model.HasSubstance && Model.HasUniiCode)
                {
                    @* Fallback to UNII from ingredient substance if no specified substances *@
                    <code @SplTemplateHelpers.Attribute("code", Model.UniiCode) @SplTemplateHelpers.Attribute("codeSystem", Model.FdaSrsCodeSystem) @SplTemplateHelpers.Attribute("codeSystemName", Model.FdaSrsCodeSystemName) />
                }

                <name>@Model.FormattedSubstanceName</name>

                @if (Model.HasActiveMoieties && Model.OrderedActiveMoieties != null)
                {
                    foreach (var moiety in Model.OrderedActiveMoieties)
                    {
                        <activeMoiety>
                            @if (!string.IsNullOrEmpty(moiety.MoietyUNII))
                            {
                                <code @SplTemplateHelpers.Attribute("code", moiety.MoietyUNII) />
                            }
                            <name>@(moiety.MoietyName ?? "")</name>
                        </activeMoiety>
                    }
                }
            </activeIngredientSubstance>
        </activeIngredient>
    }
    else
    {
        <inactiveIngredient @Raw(Model.ClassCodeAttribute)>
            <inactiveIngredientSubstance>
                @if (Model.HasSpecifiedSubstances && Model.OrderedSpecifiedSubstances != null)
                {
                    foreach (var substance in Model.OrderedSpecifiedSubstances)
                    {
                        <code @SplTemplateHelpers.Attribute("code", substance.SubstanceCode) @SplTemplateHelpers.Attribute("codeSystem", substance.SubstanceCodeSystem) @SplTemplateHelpers.Attribute("codeSystemName", substance.SubstanceCodeSystemName) />
                    }
                }
                else if (Model.HasSubstance && Model.HasUniiCode)
                {
                    @* Fallback to UNII from ingredient substance for inactive ingredients *@
                    <code @SplTemplateHelpers.Attribute("code", Model.UniiCode) @SplTemplateHelpers.Attribute("codeSystem", Model.FdaSrsCodeSystem) @SplTemplateHelpers.Attribute("codeSystemName", Model.FdaSrsCodeSystemName) />
                }

                <name>@Model.FormattedSubstanceName</name>
            </inactiveIngredientSubstance>
        </inactiveIngredient>
    }
}