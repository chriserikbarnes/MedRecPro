@using MedRecPro.Models
@using MedRecPro.Helpers
@inherits RazorLight.TemplatePage<MedRecPro.Models.SectionRendering>
@model SectionRendering

@if (Model != null)
{
    var sectionModel = Model.Section;
    var sectionIdAttribute = getSectionIdAttribute(sectionModel);
    var sectionRootGuid = SplTemplateHelpers.GuidUp(sectionModel.SectionGUID);

    var hasSectionCode = hasSectionCodeData(sectionModel);
    var sectionCodeSystemName = sectionModel.SectionCodeSystemName ?? "LOINC";

    var orderedTextContent = getOrderedTextContent(sectionModel);
    var orderedProducts = getOrderedProducts(sectionModel);
    var orderedMedia = getOrderedMedia(sectionModel);
    var orderedChildren = Model.GetOrderedChildren();

    var hasTextContent = orderedTextContent?.Any() == true;
    var hasProducts = orderedProducts?.Any() == true;
    var hasMedia = orderedMedia?.Any() == true;
    var hasChildren = orderedChildren?.Any() == true;

    <section @SplTemplateHelpers.Attribute("ID", sectionIdAttribute)>
        <id @SplTemplateHelpers.Attribute("root", sectionRootGuid) />

        @if (hasSectionCode)
        {
            <code @SplTemplateHelpers.Attribute("code", sectionModel.SectionCode) @SplTemplateHelpers.Attribute("codeSystem", sectionModel.SectionCodeSystem) @SplTemplateHelpers.Attribute("codeSystemName", sectionCodeSystemName) @SplTemplateHelpers.Attribute("displayName", sectionModel.SectionDisplayName) />
        }

        @if (!string.IsNullOrWhiteSpace(sectionModel.Title))
        {
            <title mediaType="text/x-hl7-title+xml">@sectionModel.Title</title>
        }

        @if (Model?.Section?.EffectiveTime != null)
        {
            <effectiveTime @SplTemplateHelpers.Attribute("value", SplTemplateHelpers.ToSplDate(Model.Section.EffectiveTime)) />
        }

        @* Render text content if available *@
        @if (hasTextContent)
        {
            await IncludeAsync("_TextContent", orderedTextContent);
        }

        @* Render products if available *@
        @if (hasProducts)
        {
            foreach (var product in orderedProducts)
            {
                <subject>
                    @{
                        await IncludeAsync("_Product", product);
                    }
                </subject>
            }
        }

        @* Render hierarchical child sections *@
        @*         @if (hasChildren)
        {
            foreach (var childSection in orderedChildren)
            {
                var childContext = new SectionRendering
                {
                    Section = childSection,
                    Children = new List<SectionDto>(),
                    IsStandalone = false
                };
                <component>
                    @{
                        await IncludeAsync("_Section", childContext);
                    }
                </component>
            }
        } *@


        @* Render hierarchical child sections *@
        @if (Model?.HierarchicalChildren?.Any() == true)
        {
            foreach (var childNode in Model.HierarchicalChildren)
            {
                <component>
                    @{
                        await IncludeAsync("_Section", childNode);
                    }
                </component>
            }
        }

        @* Render observation media if available *@
        @if (hasMedia)
        {
            foreach (var media in orderedMedia)
            {
                <component>
                    @{
                        await IncludeAsync("_ObservationMedia", media);
                    }
                </component>
            }
        }
    </section>
}

@functions {

    private string getSectionIdAttribute(SectionDto section)
    {
        return !string.IsNullOrEmpty(section.SectionLinkGUID)
            ? section.SectionLinkGUID
            : section.SectionGUID?.ToString()?.Replace("-", "_");
    }

    private bool hasSectionCodeData(SectionDto section)
    {
        return !string.IsNullOrEmpty(section.SectionCode) && !string.IsNullOrEmpty(section.SectionCodeSystem);
    }

    private List<SectionTextContentDto>? getOrderedTextContent(SectionDto section)
    {
        return section.TextContents?.Any() == true
            ? section.TextContents.OrderBy(tc => tc.SequenceNumber ?? 0).ToList()
            : null;
    }

    private IEnumerable<ProductDto>? getOrderedProducts(SectionDto section)
    {
        return section.Products?.Any() == true
            ? section.Products.OrderBy(p => p.ProductID ?? 0)
            : null;
    }

    private IEnumerable<ObservationMediaDto>? getOrderedMedia(SectionDto section)
    {
        return section.ObservationMedia?.Any() == true
            ? section.ObservationMedia.OrderBy(m => m.ObservationMediaID ?? 0)
            : null;
    }
}
