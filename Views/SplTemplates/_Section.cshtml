@using MedRecPro.Models
@using MedRecPro.Helpers
@inherits RazorLight.TemplatePage<MedRecPro.Models.SectionDto>
@model SectionDto

@if (Model != null)
{

    var sectionIdAttribute = !string.IsNullOrEmpty(Model.SectionLinkGUID)
        ? Model.SectionLinkGUID
        : $"section_{Model.SectionGUID?.ToString()?.Replace("-", "_")}";
    var sectionRootGuid = SplTemplateHelpers.GuidUp(Model.SectionGUID);

    var hasSectionCode = !string.IsNullOrEmpty(Model?.SectionCode) 
        &&  !string.IsNullOrEmpty(Model.SectionCodeSystem);

    var sectionCodeSystemName = Model?.SectionCodeSystemName ?? "LOINC";

    var hasTextContent = Model?.TextContents?.Any() == true;

    var orderedTextContent = hasTextContent
        ? Model?.TextContents?.OrderBy(tc => tc.SequenceNumber ?? 0).ToList()
        : null;

    var hasProducts = Model?.Products?.Any() == true;

    var orderedProducts = hasProducts
        ? Model?.Products?.OrderBy(p => p.ProductID ?? 0)
        : null;

    var hasChildHierarchies = Model?.ChildSectionHierarchies?.Any() == true;

    var orderedChildHierarchies = hasChildHierarchies
        ? Model?.ChildSectionHierarchies?.OrderBy(h => h.SequenceNumber ?? 0)
        : null;

    var hasObservationMedia = Model?.ObservationMedia?.Any() == true;

    var orderedMedia = hasObservationMedia
        ? Model?.ObservationMedia?.OrderBy(m => m.ObservationMediaID ?? 0)
        : null;

    <section @SplTemplateHelpers.Attribute("ID", sectionIdAttribute)>
        <id @SplTemplateHelpers.Attribute("root", sectionRootGuid) />
        @if (hasSectionCode)
        {
            <code @SplTemplateHelpers.Attribute("code", Model.SectionCode) @SplTemplateHelpers.Attribute("codeSystem", Model.SectionCodeSystem) @SplTemplateHelpers.Attribute("codeSystemName", sectionCodeSystemName) @SplTemplateHelpers.Attribute("displayName", Model.SectionDisplayName) />
        }
        @if (!string.IsNullOrWhiteSpace(Model.Title))
        {
            <title mediaType="text/x-hl7-title+xml">@Model.Title</title>
        }
        @if (orderedTextContent != null)
        {
            await IncludeAsync("_TextContent", orderedTextContent);
        }
        @if (Model?.EffectiveTime != null)
        {
            <effectiveTime @SplTemplateHelpers.Attribute("value", SplTemplateHelpers.ToSplDate(Model.EffectiveTime)) />
        }
        @if (orderedProducts != null)
        {
            foreach (var product in orderedProducts)
            {
                <subject>
                    @{
                        await IncludeAsync("_Product", product);
                    }
                </subject>
            }
        }
        @if (orderedChildHierarchies != null)
        {
            foreach (var childHierarchy in orderedChildHierarchies)
            {
                SectionDto? childSection = null;

                if (childHierarchy.ChildSectionID.HasValue &&
                Model?.StructuredBody?.Sections?.Any() == true)
                {
                    childSection = Model.StructuredBody.Sections
                    .FirstOrDefault(s => s.SectionID == childHierarchy.ChildSectionID.Value);
                }

                if (childSection != null)
                {
                    <component>
                        @{
                            await IncludeAsync("_Section", childSection);
                        }
                    </component>
                }
            }
        }
        @if (orderedMedia != null)
        {
            foreach (var media in orderedMedia)
            {
                <component>
                    await IncludeAsync("_ObservationMedia", media);
                </component>
            }
        }
    </section>
}