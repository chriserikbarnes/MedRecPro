@using MedRecPro.Models;
@using MedRecPro.Helpers;
@inherits RazorLight.TemplatePage<MedRecPro.Models.SectionRendering>;
@model SectionRendering;

@if (Model != null)
{
    var sectionModel = Model.Section;
    var sectionRootGuid = SplTemplateHelpers.GuidDown(sectionModel.SectionGUID);

    <section @SplTemplateHelpers.Attribute("ID", Model.SectionIdAttribute)>
        <id @SplTemplateHelpers.Attribute("root", sectionRootGuid) />

        @if (Model.HasSectionCode)
        {
            <code @SplTemplateHelpers.Attribute("code", sectionModel.SectionCode) @SplTemplateHelpers.Attribute("codeSystem", sectionModel.SectionCodeSystem) @SplTemplateHelpers.Attribute("displayName", sectionModel.SectionDisplayName) />
        }

        @if (!string.IsNullOrWhiteSpace(sectionModel.Title))
        {
            <title>@sectionModel.Title</title>
        }

        @if (Model?.Section?.EffectiveTime != null)
        {
            <effectiveTime @SplTemplateHelpers.Attribute("value", SplTemplateHelpers.ToSplDate(Model.Section.EffectiveTime)) />
        }

        @* Render text content if available *@
        @if (Model.HasTextContent && Model.RenderedTextContent != null)
        {
            await IncludeAsync("_TextContent", Model.RenderedTextContent);
        }

        @* Render enhanced products if available using the corrected approach *@
        @if (Model.HasRenderedProducts && Model.RenderedProducts != null)
        {
            foreach (var productRendering in Model.RenderedProducts)
            {
                @* Use the enhanced ProductRendering object instead of raw ProductDto *@
                await IncludeAsync("_Product", productRendering);
            }
        }

        @* Render hierarchical child sections *@
        @if (Model.HasHierarchicalChildren)
        {
            foreach (var childNode in Model.HierarchicalChildren)
            {
                <component>
                    @{
                        await IncludeAsync("_Section", childNode);
                    }
                </component>
            }
        }

        @* Render observation media if available *@
        @if (Model.HasMedia && Model.OrderedMedia != null)
        {
            foreach (var media in Model.OrderedMedia)
            {
                <component>
                    @{
                        await IncludeAsync("_ObservationMedia", media);
                    }
                </component>
            }
        }
    </section>
}