@using RazorLight.Razor
@using MedRecPro.Models
@using MedRecPro.Helpers
@inherits RazorLight.TemplatePage<MedRecPro.Models.ProductDto>
@model ProductDto

@if (Model != null)
{
    var activeIngredients = Model.Ingredients?
    .Where(i => i.OriginatingElement?.Equals("activeIngredient", StringComparison.OrdinalIgnoreCase) == true)
    .OrderBy(i => i.SequenceNumber);

    var inactiveIngredients = Model.Ingredients?
    .Where(i => i.OriginatingElement?.Equals("inactiveIngredient", StringComparison.OrdinalIgnoreCase) == true)
    .OrderBy(i => i.SequenceNumber);

    var orderedCharacteristics = Model.Characteristics?
    .OrderBy(c => c.CharacteristicID);

    var topLevelPackaging = Model.PackagingLevels?
    .Where(p => p.PackagingHierarchy == null || !p.PackagingHierarchy.Any())
    .OrderBy(p => p.PackagingLevelID);

    var orderedRoutes = Model.Routes?
        .OrderBy(r => r.ProductRouteOfAdministrationID);

    <manufacturedProduct>
        <manufacturedMedicine>
            @{
                // Main product NDC code
                var ndcProduct = Model.ProductIdentifiers?
                .FirstOrDefault(pi => pi.IdentifierType?.Equals("NDC", StringComparison.OrdinalIgnoreCase) == true
                || pi.IdentifierType?.Equals("NDCProduct", StringComparison.OrdinalIgnoreCase) == true);
            }

            @if (ndcProduct != null)
            {
                <code @SplTemplateHelpers.Attribute("code", ndcProduct.IdentifierValue) @SplTemplateHelpers.Attribute("codeSystem", ndcProduct.IdentifierSystemOID) />
            }

            <name>@Model.ProductName</name>
            <formCode @SplTemplateHelpers.Attribute("code", Model.FormCode) @SplTemplateHelpers.Attribute("codeSystem", Model.FormCodeSystem) @SplTemplateHelpers.Attribute("displayName", Model.FormDisplayName) />

            @if (activeIngredients != null)
            {
                foreach (var ingredient in activeIngredients)
                {
                    await IncludeAsync("_Ingredient", ingredient);
                }
            }

            @if (Model.GenericMedicines != null)
            {
                foreach (var generic in Model.GenericMedicines)
                {
                    <asEntityWithGeneric>
                        <genericMedicine>
                            <name>@generic.GenericName</name>
                        </genericMedicine>
                    </asEntityWithGeneric>
                }
            }

            @if (inactiveIngredients != null)
            {
                foreach (var ingredient in inactiveIngredients)
                {
                    await IncludeAsync("_Ingredient", ingredient);
                }
            }

            @if (topLevelPackaging != null)
            {
                foreach (var package in topLevelPackaging)
                {
                    await IncludeAsync("_Packaging", package);
                }
            }
        </manufacturedMedicine>

        @if (orderedCharacteristics != null)
        {
            foreach (var characteristic in orderedCharacteristics)
            {
                <subjectOf>
                    @{
                        await IncludeAsync("_Characteristic", characteristic);
                    }
                </subjectOf>
            }
        }

        @if (orderedRoutes != null)
        {
            foreach (var route in orderedRoutes)
            {
                <consumedIn>
                    <substanceAdministration>
                        <routeCode @SplTemplateHelpers.Attribute("code", route?.RouteCode) @SplTemplateHelpers.Attribute("codeSystem", route?.RouteCodeSystem) @SplTemplateHelpers.Attribute("displayName", route?.RouteDisplayName) />
                    </substanceAdministration>
                </consumedIn>
            }
        }
    </manufacturedProduct>
}