@using RazorLight.Razor;
@using MedRecPro.Models;
@using MedRecPro.Helpers;
@using MedRecPro.Service;
@inherits RazorLight.TemplatePage<MedRecPro.Models.ProductRendering>;
@model ProductRendering;

@* Clean template with proper fallback logic *@
@if (Model != null)
{
    var productModel = Model.ProductDto;
    <subject>
        <manufacturedProduct>
            <manufacturedProduct>

                @* Render NDC identifier if available *@
                @if (Model.HasNdcIdentifier && Model.NdcProductIdentifier != null)
                {
                    <code @SplTemplateHelpers.Attribute("code", Model.NdcProductIdentifier.IdentifierValue) @SplTemplateHelpers.Attribute("codeSystem", Model.NdcProductIdentifier.IdentifierSystemOID) />
                }

                <name>@productModel.ProductName</name>
                <formCode @SplTemplateHelpers.Attribute("code", productModel.FormCode) @SplTemplateHelpers.Attribute("codeSystem", productModel.FormCodeSystem) @SplTemplateHelpers.Attribute("displayName", productModel.FormDisplayName) />

                @* Render generic medicines if available *@
                @if (Model.HasGenericMedicines && productModel.GenericMedicines != null)
                {
                    foreach (var generic in productModel.GenericMedicines)
                    {
                        <asEntityWithGeneric>
                            <genericMedicine>
                                <name>@generic.GenericName</name>
                            </genericMedicine>
                        </asEntityWithGeneric>
                    }
                }

                @* Render active ingredients if available *@
                @if (Model.HasActiveIngredients && Model.ActiveIngredients != null)
                {
                    foreach (var ingredient in Model.ActiveIngredients)
                    {
                        await IncludeAsync("_Ingredient", ingredient);
                    }
                }

                @* Render inactive ingredients if available *@
                @if (Model.HasInactiveIngredients && Model.InactiveIngredients != null)
                {
                    foreach (var ingredient in Model.InactiveIngredients)
                    {
                        await IncludeAsync("_Ingredient", ingredient);
                    }
                }

                @* Render top-level packaging if available *@
                @if (Model.HasPackageRendering && Model.PackageRendering != null)
                {
                    foreach (var packageRendering in Model.PackageRendering)
                    {
                        await IncludeAsync("_Packaging", packageRendering);
                    }
                }

            </manufacturedProduct>

            @* Render marketing status if available *@
            @if (Model.HasMarketingStatus && Model.OrderedMarketingCategories != null)
            {
                foreach (var marketingCategory in Model.OrderedMarketingCategories)
                {
                    <subjectOf>
                        @{
                            await IncludeAsync("_MarketingStatus", marketingCategory);
                        }
                    </subjectOf>
                }
            }
            else if (Model.HasPrimaryMarketingCategory && Model.PrimaryMarketingCategory != null)
            {
                @* Render single marketing status for simplified scenarios *@  
                 <subjectOf>
                    @{
                        await IncludeAsync("_MarketingStatus", Model.PrimaryMarketingCategory);
                    }
                </subjectOf>
            }

            @* Render product-level marketing acts if available *@
            @if (Model.HasMarketingAct && Model.OrderedMarketingStatuses != null)
            {
                foreach (var marketingStatus in Model.OrderedMarketingStatuses)
                {
                    <subjectOf>
                        <marketingAct>
                            <code @SplTemplateHelpers.Attribute("code", marketingStatus.MarketingActCode) @SplTemplateHelpers.Attribute("codeSystem", marketingStatus.MarketingActCodeSystem) />
                            <statusCode @SplTemplateHelpers.Attribute("code", marketingStatus.StatusCode) />
                            <effectiveTime>
                                @if (marketingStatus.EffectiveStartDate.HasValue)
                                {
                                    <low @SplTemplateHelpers.Attribute("value", SplTemplateHelpers.ToSplDate(marketingStatus.EffectiveStartDate)) />
                                }
                                @if (marketingStatus.EffectiveEndDate.HasValue)
                                {
                                    <high @SplTemplateHelpers.Attribute("value", SplTemplateHelpers.ToSplDate(marketingStatus.EffectiveEndDate)) />
                                }
                            </effectiveTime>
                        </marketingAct>
                    </subjectOf>
                }
            }

            @* Render characteristics with proper fallback logic *@
            @if (Model.HasCharacteristicRendering && Model.CharacteristicRendering != null)
            {
                @* Use enhanced characteristic rendering *@
                foreach (var characteristicRendering in Model.CharacteristicRendering)
                {
                    <subjectOf>
                        @{
                            await IncludeAsync("_Characteristic", characteristicRendering);
                        }
                    </subjectOf>
                }
            }
            else if (Model.HasCharacteristics && Model.OrderedCharacteristics != null)
            {

                var characteristicService = new CharacteristicRenderingService();

                foreach (var characteristic in Model.OrderedCharacteristics)
                {

                    var enhancedCharacteristic = characteristicService.PrepareForRendering(characteristic);

                    <subjectOf>
                        @{
                            await IncludeAsync("_Characteristic", enhancedCharacteristic);
                        }
                    </subjectOf>
                }
            }

            @* Render routes if available *@
            @if (Model.HasRoutes && Model.OrderedRoutes != null)
            {
                foreach (var route in Model.OrderedRoutes)
                {
                    <consumedIn>
                        <substanceAdministration>
                            <routeCode @SplTemplateHelpers.Attribute("code", route?.RouteCode) @SplTemplateHelpers.Attribute("codeSystem", route?.RouteCodeSystem) @SplTemplateHelpers.Attribute("displayName", route?.RouteDisplayName) />
                        </substanceAdministration>
                    </consumedIn>
                }
            }
        </manufacturedProduct>
    </subject>
}