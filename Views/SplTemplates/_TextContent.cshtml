@using MedRecPro.Models;
@using MedRecPro.Helpers;
@inherits RazorLight.TemplatePage<List<MedRecPro.Models.TextContentRendering>>;
@model List<TextContentRendering>;

<text>
    @if (Model != null)
    {
        foreach (var renderedContent in Model)
        {
            switch (renderedContent.RenderingAction)
            {
                case TextContentRenderingAction.RenderParagraph:
                case TextContentRenderingAction.RenderDefaultParagraph:
                    <paragraph>@Raw(renderedContent.ProcessedContentText)</paragraph>
                    break;

                case TextContentRenderingAction.RenderMultiMedia:
                    @* Render all multimedia references from resolved MediaID values *@
                    @if (renderedContent.ResolvedMediaIds != null)
                    {
                        foreach (var mediaId in renderedContent.ResolvedMediaIds)
                        {
                            <renderMultiMedia @SplTemplateHelpers.Attribute("referencedObject", mediaId) />
                        }
                    }
                    @* Fallback: render with single referenced object if available *@
                    else if (!string.IsNullOrEmpty(renderedContent.ReferencedObjectId))
                    {
                        <renderMultiMedia @SplTemplateHelpers.Attribute("referencedObject", renderedContent.ReferencedObjectId)>@Raw(renderedContent.ProcessedContentText)</renderMultiMedia>
                    }
                    else if (renderedContent.HasContentText)
                    {
                        <renderMultiMedia>@Raw(renderedContent.ProcessedContentText)</renderMultiMedia>
                    }
                    break;

                case TextContentRenderingAction.RenderLists:
                    @if (renderedContent.OrderedTextLists != null)
                    {
                        foreach (var list in renderedContent.OrderedTextLists)
                        {
                            await IncludeAsync("_List", list);
                        }
                    }
                    break;

                case TextContentRenderingAction.RenderTables:
                    @if (renderedContent.OrderedTextTables != null)
                    {
                        foreach (var table in renderedContent.OrderedTextTables)
                        {
                            await IncludeAsync("_Table", table);
                        }
                    }
                    break;

                case TextContentRenderingAction.RenderCaption:
                    <caption>@Raw(renderedContent.ProcessedContentText)</caption>
                    break;

                case TextContentRenderingAction.RenderFootnote:
                    <footnote>@Raw(renderedContent.ProcessedContentText)</footnote>
                    break;

                case TextContentRenderingAction.RenderStructuredContent:
                    @if (renderedContent.OrderedTextLists != null)
                    {
                        foreach (var list in renderedContent.OrderedTextLists)
                        {
                            await IncludeAsync("_List", list);
                        }
                    }
                    @if (renderedContent.OrderedTextTables != null)
                    {
                        foreach (var table in renderedContent.OrderedTextTables)
                        {
                            await IncludeAsync("_Table", table);
                        }
                    }
                    break;

                case TextContentRenderingAction.SkipRendering:
                    @* Skip rendering - no output *@
                    break;
            }
        }
    }
</text>
