@using MedRecPro.Models;
@using Microsoft.AspNetCore.Html;
@using RazorLight.Razor;
@using MedRecPro.Helpers;
@inherits RazorLight.TemplatePage<MedRecPro.Models.CharacteristicRendering>;
@model CharacteristicRendering;

@* data pre-computed by CharacteristicRenderingService *@
@if (Model?.HasRenderableContent == true)
{
    var characteristic = Model.CharacteristicDto;
    <characteristic classCode="OBS">
        <code @SplTemplateHelpers.Attribute("code", characteristic.CharacteristicCode) @SplTemplateHelpers.Attribute("codeSystem", characteristic.CharacteristicCodeSystem) />

        @if (Model.ShouldRenderAsCodedElement)
        {
            <value @SplTemplateHelpers.Attribute("code", characteristic.ValueCV_Code) @SplTemplateHelpers.Attribute("codeSystem", characteristic.ValueCV_CodeSystem) @SplTemplateHelpers.Attribute("displayName", characteristic.ValueCV_DisplayName) xsi:type="CE">
                @if (Model.ShouldDisplayOriginalText)
                {
                    <originalText>@characteristic.ValueCV_DisplayName</originalText>
                }
            </value>
        }
        else if (Model.ShouldRenderAsPhysicalQuantity)
        {
            <value @SplTemplateHelpers.Attribute("unit", characteristic.ValuePQ_Unit) @SplTemplateHelpers.Attribute("value", Model.FormattedQuantityValue) xsi:type="PQ" />
        }
        else if (Model.ShouldRenderAsBoolean)
        {
            <value @SplTemplateHelpers.Attribute("value", Model.FormattedBooleanValue) xsi:type="BL" />
        }
        else if (Model.ShouldRenderAsInteger)
        {
            <value @SplTemplateHelpers.Attribute("value", Model.FormattedIntegerValue) xsi:type="INT" />
        }
        else if (Model.ShouldRenderAsString)
        {
            <value xsi:type="ST">@characteristic.ValueST</value>
        }
        else if (Model.ShouldRenderAsFallbackCoded)
        {
            <value @SplTemplateHelpers.Attribute("code", characteristic.ValueCV_Code) @SplTemplateHelpers.Attribute("codeSystem", characteristic.ValueCV_CodeSystem) @SplTemplateHelpers.Attribute("displayName", characteristic.ValueCV_DisplayName) xsi:type="CE">
                @if (Model.ShouldDisplayOriginalText)
                {
                    <originalText>@characteristic.ValueCV_DisplayName</originalText>
                }
            </value>
        }
        else if (Model.ShouldRenderAsFallbackString)
        {
            <value xsi:type="ST">@characteristic.ValueST</value>
        }
    </characteristic>
}